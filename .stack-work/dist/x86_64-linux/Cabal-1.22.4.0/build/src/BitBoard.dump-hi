
==================== FINAL INTERFACE ====================
2015-12-22 17:35:21.590385 UTC

interface hches_BypoOHN0xb7K9M5rFIMmXv:BitBoard 7102
  interface hash: 6c02e1869256da2ef74b582991050069
  ABI hash: 68d265c6c1923a37e886a14ffb1288e1
  export-list hash: ff4a42395a30ecee75fb51dc7afc9234
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b2869d8fcf4c769a0bf931957519fbbd
  sig of: Nothing
  used TH splices: False
  where
exports:
  BitBoard.emptyBoard
  BitBoard.Bishops{BitBoard.B BitBoard.unB}
  BitBoard.BitBoard{BitBoard.BitBoard}
  BitBoard.BlackPieces{BitBoard.BC BitBoard.unBC}
  BitBoard.Kings{BitBoard.K BitBoard.unK}
  BitBoard.Knights{BitBoard.N BitBoard.unN}
  BitBoard.Pawns{BitBoard.P BitBoard.unP}
  BitBoard.Queens{BitBoard.Q BitBoard.unQ}
  BitBoard.Rooks{BitBoard.R BitBoard.unR}
  BitBoard.WhitePieces{BitBoard.WC BitBoard.unWC}
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0 containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
import  -/  base-4.8.1.0:Data.Bits 5341167fdd5958c2b3f0dac8924f1efd
import  -/  base-4.8.1.0:Data.Word 448c480b98a0c18988a37db5ab829b22
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Enum d0db4d619cd8916cc7a23444816222af
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:GHC.Word ef6286c279d61931eb675109b4b93579
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base 41288a612f7bbd399bc0bb07f2f75738
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Strict 75157829e2fd1bf3aaf8a4fd3bd7d8f4
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type bf9b4d13b1dbe96a83786d2e47d2e8ca
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops :: Data.Bits.Bits BitBoard.Bishops
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Bishops
                  BitBoard.$fEqBishops
                  BitBoard.$fBitsBishops_$c.&.
                  BitBoard.$fBitsBishops_$c.|.
                  BitBoard.$fBitsBishops_$cxor
                  BitBoard.$fBitsBishops_$ccomplement
                  BitBoard.$fBitsBishops_$cshift
                  BitBoard.$fBitsBishops_$crotate
                  BitBoard.$fBitsBishops_$czeroBits
                  BitBoard.$fBitsBishops_$cbit
                  BitBoard.$fBitsBishops_$csetBit
                  BitBoard.$fBitsBishops_$cclearBit
                  BitBoard.$fBitsBishops_$ccomplementBit
                  BitBoard.$fBitsBishops_$ctestBit
                  BitBoard.$fBitsBishops_$cbitSizeMaybe
                  BitBoard.$fBitsBishops_$cfiniteBitSize
                  BitBoard.$fBitsBishops_$cisSigned
                  BitBoard.$fBitsBishops_$cshiftL
                  BitBoard.$fBitsBishops_$cunsafeShiftL
                  BitBoard.$fBitsBishops_$cshiftR
                  BitBoard.$fBitsBishops_$cunsafeShiftR
                  BitBoard.$fBitsBishops_$crotateL
                  BitBoard.$fBitsBishops_$crotateR
                  BitBoard.$fBitsBishops_$cpopCount -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$c.&. ::
    BitBoard.Bishops -> BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$c.|. ::
    BitBoard.Bishops -> BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cbit :: GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cbitSizeMaybe ::
    BitBoard.Bishops -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cclearBit ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$ccomplement :: BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$ccomplementBit ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cfiniteBitSize :: BitBoard.Bishops -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cisSigned :: BitBoard.Bishops -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0]) ->_R <GHC.Types.Bool>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cpopCount :: BitBoard.Bishops -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$crotate ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$crotateL ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$crotateR ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$csetBit ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cshift ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cshiftL ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cshiftR ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$ctestBit ::
    BitBoard.Bishops -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cunsafeShiftL ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cunsafeShiftR ::
    BitBoard.Bishops -> GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$cxor ::
    BitBoard.Bishops -> BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fBitsBishops_$czeroBits :: BitBoard.Bishops
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (BitBoard.NTCo:Bishops[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces :: Data.Bits.Bits BitBoard.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.BlackPieces
                  BitBoard.$fEqBlackPieces
                  BitBoard.$fBitsBlackPieces_$c.&.
                  BitBoard.$fBitsBlackPieces_$c.|.
                  BitBoard.$fBitsBlackPieces_$cxor
                  BitBoard.$fBitsBlackPieces_$ccomplement
                  BitBoard.$fBitsBlackPieces_$cshift
                  BitBoard.$fBitsBlackPieces_$crotate
                  BitBoard.$fBitsBlackPieces_$czeroBits
                  BitBoard.$fBitsBlackPieces_$cbit
                  BitBoard.$fBitsBlackPieces_$csetBit
                  BitBoard.$fBitsBlackPieces_$cclearBit
                  BitBoard.$fBitsBlackPieces_$ccomplementBit
                  BitBoard.$fBitsBlackPieces_$ctestBit
                  BitBoard.$fBitsBlackPieces_$cbitSizeMaybe
                  BitBoard.$fBitsBlackPieces_$cfiniteBitSize
                  BitBoard.$fBitsBlackPieces_$cisSigned
                  BitBoard.$fBitsBlackPieces_$cshiftL
                  BitBoard.$fBitsBlackPieces_$cunsafeShiftL
                  BitBoard.$fBitsBlackPieces_$cshiftR
                  BitBoard.$fBitsBlackPieces_$cunsafeShiftR
                  BitBoard.$fBitsBlackPieces_$crotateL
                  BitBoard.$fBitsBlackPieces_$crotateR
                  BitBoard.$fBitsBlackPieces_$cpopCount -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$c.&. ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$c.|. ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cbit :: GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cbitSizeMaybe ::
    BitBoard.BlackPieces -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cclearBit ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$ccomplement ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$ccomplementBit ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cfiniteBitSize ::
    BitBoard.BlackPieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cisSigned ::
    BitBoard.BlackPieces -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0]) ->_R <GHC.Types.Bool>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cpopCount ::
    BitBoard.BlackPieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$crotate ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$crotateL ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$crotateR ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$csetBit ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cshift ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cshiftL ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cshiftR ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$ctestBit ::
    BitBoard.BlackPieces -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cunsafeShiftL ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cunsafeShiftR ::
    BitBoard.BlackPieces -> GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$cxor ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fBitsBlackPieces_$czeroBits :: BitBoard.BlackPieces
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (BitBoard.NTCo:BlackPieces[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings :: Data.Bits.Bits BitBoard.Kings
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Kings
                  BitBoard.$fEqKings
                  BitBoard.$fBitsKings_$c.&.
                  BitBoard.$fBitsKings_$c.|.
                  BitBoard.$fBitsKings_$cxor
                  BitBoard.$fBitsKings_$ccomplement
                  BitBoard.$fBitsKings_$cshift
                  BitBoard.$fBitsKings_$crotate
                  BitBoard.$fBitsKings_$czeroBits
                  BitBoard.$fBitsKings_$cbit
                  BitBoard.$fBitsKings_$csetBit
                  BitBoard.$fBitsKings_$cclearBit
                  BitBoard.$fBitsKings_$ccomplementBit
                  BitBoard.$fBitsKings_$ctestBit
                  BitBoard.$fBitsKings_$cbitSizeMaybe
                  BitBoard.$fBitsKings_$cfiniteBitSize
                  BitBoard.$fBitsKings_$cisSigned
                  BitBoard.$fBitsKings_$cshiftL
                  BitBoard.$fBitsKings_$cunsafeShiftL
                  BitBoard.$fBitsKings_$cshiftR
                  BitBoard.$fBitsKings_$cunsafeShiftR
                  BitBoard.$fBitsKings_$crotateL
                  BitBoard.$fBitsKings_$crotateR
                  BitBoard.$fBitsKings_$cpopCount -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$c.&. ::
    BitBoard.Kings -> BitBoard.Kings -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$c.|. ::
    BitBoard.Kings -> BitBoard.Kings -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cbit :: GHC.Types.Int -> BitBoard.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cbitSizeMaybe ::
    BitBoard.Kings -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cclearBit ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$ccomplement :: BitBoard.Kings -> BitBoard.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$ccomplementBit ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cfiniteBitSize :: BitBoard.Kings -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cisSigned :: BitBoard.Kings -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R <GHC.Types.Bool>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cpopCount :: BitBoard.Kings -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$crotate ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$crotateL ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$crotateR ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$csetBit ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cshift ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cshiftL ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cshiftR ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$ctestBit ::
    BitBoard.Kings -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cunsafeShiftL ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cunsafeShiftR ::
    BitBoard.Kings -> GHC.Types.Int -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$cxor ::
    BitBoard.Kings -> BitBoard.Kings -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fBitsKings_$czeroBits :: BitBoard.Kings
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (BitBoard.NTCo:Kings[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights :: Data.Bits.Bits BitBoard.Knights
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Knights
                  BitBoard.$fEqKnights
                  BitBoard.$fBitsKnights_$c.&.
                  BitBoard.$fBitsKnights_$c.|.
                  BitBoard.$fBitsKnights_$cxor
                  BitBoard.$fBitsKnights_$ccomplement
                  BitBoard.$fBitsKnights_$cshift
                  BitBoard.$fBitsKnights_$crotate
                  BitBoard.$fBitsKnights_$czeroBits
                  BitBoard.$fBitsKnights_$cbit
                  BitBoard.$fBitsKnights_$csetBit
                  BitBoard.$fBitsKnights_$cclearBit
                  BitBoard.$fBitsKnights_$ccomplementBit
                  BitBoard.$fBitsKnights_$ctestBit
                  BitBoard.$fBitsKnights_$cbitSizeMaybe
                  BitBoard.$fBitsKnights_$cfiniteBitSize
                  BitBoard.$fBitsKnights_$cisSigned
                  BitBoard.$fBitsKnights_$cshiftL
                  BitBoard.$fBitsKnights_$cunsafeShiftL
                  BitBoard.$fBitsKnights_$cshiftR
                  BitBoard.$fBitsKnights_$cunsafeShiftR
                  BitBoard.$fBitsKnights_$crotateL
                  BitBoard.$fBitsKnights_$crotateR
                  BitBoard.$fBitsKnights_$cpopCount -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$c.&. ::
    BitBoard.Knights -> BitBoard.Knights -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$c.|. ::
    BitBoard.Knights -> BitBoard.Knights -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cbit :: GHC.Types.Int -> BitBoard.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cbitSizeMaybe ::
    BitBoard.Knights -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cclearBit ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$ccomplement :: BitBoard.Knights -> BitBoard.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$ccomplementBit ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cfiniteBitSize :: BitBoard.Knights -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cisSigned :: BitBoard.Knights -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0]) ->_R <GHC.Types.Bool>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cpopCount :: BitBoard.Knights -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$crotate ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$crotateL ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$crotateR ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$csetBit ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cshift ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cshiftL ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cshiftR ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$ctestBit ::
    BitBoard.Knights -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cunsafeShiftL ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cunsafeShiftR ::
    BitBoard.Knights -> GHC.Types.Int -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$cxor ::
    BitBoard.Knights -> BitBoard.Knights -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fBitsKnights_$czeroBits :: BitBoard.Knights
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (BitBoard.NTCo:Knights[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns :: Data.Bits.Bits BitBoard.Pawns
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Pawns
                  BitBoard.$fEqPawns
                  BitBoard.$fBitsPawns_$c.&.
                  BitBoard.$fBitsPawns_$c.|.
                  BitBoard.$fBitsPawns_$cxor
                  BitBoard.$fBitsPawns_$ccomplement
                  BitBoard.$fBitsPawns_$cshift
                  BitBoard.$fBitsPawns_$crotate
                  BitBoard.$fBitsPawns_$czeroBits
                  BitBoard.$fBitsPawns_$cbit
                  BitBoard.$fBitsPawns_$csetBit
                  BitBoard.$fBitsPawns_$cclearBit
                  BitBoard.$fBitsPawns_$ccomplementBit
                  BitBoard.$fBitsPawns_$ctestBit
                  BitBoard.$fBitsPawns_$cbitSizeMaybe
                  BitBoard.$fBitsPawns_$cfiniteBitSize
                  BitBoard.$fBitsPawns_$cisSigned
                  BitBoard.$fBitsPawns_$cshiftL
                  BitBoard.$fBitsPawns_$cunsafeShiftL
                  BitBoard.$fBitsPawns_$cshiftR
                  BitBoard.$fBitsPawns_$cunsafeShiftR
                  BitBoard.$fBitsPawns_$crotateL
                  BitBoard.$fBitsPawns_$crotateR
                  BitBoard.$fBitsPawns_$cpopCount -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$c.&. ::
    BitBoard.Pawns -> BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$c.|. ::
    BitBoard.Pawns -> BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cbit :: GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cbitSizeMaybe ::
    BitBoard.Pawns -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cclearBit ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$ccomplement :: BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$ccomplementBit ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cfiniteBitSize :: BitBoard.Pawns -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cisSigned :: BitBoard.Pawns -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R <GHC.Types.Bool>_R) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cpopCount :: BitBoard.Pawns -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$crotate ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$crotateL ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$crotateR ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$csetBit ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cshift ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cshiftL ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cshiftR ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$ctestBit ::
    BitBoard.Pawns -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cunsafeShiftL ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cunsafeShiftR ::
    BitBoard.Pawns -> GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$cxor ::
    BitBoard.Pawns -> BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fBitsPawns_$czeroBits :: BitBoard.Pawns
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (BitBoard.NTCo:Pawns[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens :: Data.Bits.Bits BitBoard.Queens
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Queens
                  BitBoard.$fEqQueens
                  BitBoard.$fBitsQueens_$c.&.
                  BitBoard.$fBitsQueens_$c.|.
                  BitBoard.$fBitsQueens_$cxor
                  BitBoard.$fBitsQueens_$ccomplement
                  BitBoard.$fBitsQueens_$cshift
                  BitBoard.$fBitsQueens_$crotate
                  BitBoard.$fBitsQueens_$czeroBits
                  BitBoard.$fBitsQueens_$cbit
                  BitBoard.$fBitsQueens_$csetBit
                  BitBoard.$fBitsQueens_$cclearBit
                  BitBoard.$fBitsQueens_$ccomplementBit
                  BitBoard.$fBitsQueens_$ctestBit
                  BitBoard.$fBitsQueens_$cbitSizeMaybe
                  BitBoard.$fBitsQueens_$cfiniteBitSize
                  BitBoard.$fBitsQueens_$cisSigned
                  BitBoard.$fBitsQueens_$cshiftL
                  BitBoard.$fBitsQueens_$cunsafeShiftL
                  BitBoard.$fBitsQueens_$cshiftR
                  BitBoard.$fBitsQueens_$cunsafeShiftR
                  BitBoard.$fBitsQueens_$crotateL
                  BitBoard.$fBitsQueens_$crotateR
                  BitBoard.$fBitsQueens_$cpopCount -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$c.&. ::
    BitBoard.Queens -> BitBoard.Queens -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$c.|. ::
    BitBoard.Queens -> BitBoard.Queens -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cbit :: GHC.Types.Int -> BitBoard.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cbitSizeMaybe ::
    BitBoard.Queens -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cclearBit ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$ccomplement :: BitBoard.Queens -> BitBoard.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$ccomplementBit ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cfiniteBitSize :: BitBoard.Queens -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cisSigned :: BitBoard.Queens -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0]) ->_R <GHC.Types.Bool>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cpopCount :: BitBoard.Queens -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$crotate ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$crotateL ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$crotateR ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$csetBit ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cshift ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cshiftL ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cshiftR ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$ctestBit ::
    BitBoard.Queens -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cunsafeShiftL ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cunsafeShiftR ::
    BitBoard.Queens -> GHC.Types.Int -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$cxor ::
    BitBoard.Queens -> BitBoard.Queens -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fBitsQueens_$czeroBits :: BitBoard.Queens
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (BitBoard.NTCo:Queens[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks :: Data.Bits.Bits BitBoard.Rooks
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Rooks
                  BitBoard.$fEqRooks
                  BitBoard.$fBitsRooks_$c.&.
                  BitBoard.$fBitsRooks_$c.|.
                  BitBoard.$fBitsRooks_$cxor
                  BitBoard.$fBitsRooks_$ccomplement
                  BitBoard.$fBitsRooks_$cshift
                  BitBoard.$fBitsRooks_$crotate
                  BitBoard.$fBitsRooks_$czeroBits
                  BitBoard.$fBitsRooks_$cbit
                  BitBoard.$fBitsRooks_$csetBit
                  BitBoard.$fBitsRooks_$cclearBit
                  BitBoard.$fBitsRooks_$ccomplementBit
                  BitBoard.$fBitsRooks_$ctestBit
                  BitBoard.$fBitsRooks_$cbitSizeMaybe
                  BitBoard.$fBitsRooks_$cfiniteBitSize
                  BitBoard.$fBitsRooks_$cisSigned
                  BitBoard.$fBitsRooks_$cshiftL
                  BitBoard.$fBitsRooks_$cunsafeShiftL
                  BitBoard.$fBitsRooks_$cshiftR
                  BitBoard.$fBitsRooks_$cunsafeShiftR
                  BitBoard.$fBitsRooks_$crotateL
                  BitBoard.$fBitsRooks_$crotateR
                  BitBoard.$fBitsRooks_$cpopCount -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$c.&. ::
    BitBoard.Rooks -> BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$c.|. ::
    BitBoard.Rooks -> BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cbit :: GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cbitSizeMaybe ::
    BitBoard.Rooks -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cclearBit ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$ccomplement :: BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$ccomplementBit ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cfiniteBitSize :: BitBoard.Rooks -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cisSigned :: BitBoard.Rooks -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R <GHC.Types.Bool>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cpopCount :: BitBoard.Rooks -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$crotate ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$crotateL ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$crotateR ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$csetBit ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cshift ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cshiftL ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cshiftR ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$ctestBit ::
    BitBoard.Rooks -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cunsafeShiftL ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cunsafeShiftR ::
    BitBoard.Rooks -> GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$cxor ::
    BitBoard.Rooks -> BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fBitsRooks_$czeroBits :: BitBoard.Rooks
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (BitBoard.NTCo:Rooks[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces :: Data.Bits.Bits BitBoard.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.WhitePieces
                  BitBoard.$fEqWhitePieces
                  BitBoard.$fBitsWhitePieces_$c.&.
                  BitBoard.$fBitsWhitePieces_$c.|.
                  BitBoard.$fBitsWhitePieces_$cxor
                  BitBoard.$fBitsWhitePieces_$ccomplement
                  BitBoard.$fBitsWhitePieces_$cshift
                  BitBoard.$fBitsWhitePieces_$crotate
                  BitBoard.$fBitsWhitePieces_$czeroBits
                  BitBoard.$fBitsWhitePieces_$cbit
                  BitBoard.$fBitsWhitePieces_$csetBit
                  BitBoard.$fBitsWhitePieces_$cclearBit
                  BitBoard.$fBitsWhitePieces_$ccomplementBit
                  BitBoard.$fBitsWhitePieces_$ctestBit
                  BitBoard.$fBitsWhitePieces_$cbitSizeMaybe
                  BitBoard.$fBitsWhitePieces_$cfiniteBitSize
                  BitBoard.$fBitsWhitePieces_$cisSigned
                  BitBoard.$fBitsWhitePieces_$cshiftL
                  BitBoard.$fBitsWhitePieces_$cunsafeShiftL
                  BitBoard.$fBitsWhitePieces_$cshiftR
                  BitBoard.$fBitsWhitePieces_$cunsafeShiftR
                  BitBoard.$fBitsWhitePieces_$crotateL
                  BitBoard.$fBitsWhitePieces_$crotateR
                  BitBoard.$fBitsWhitePieces_$cpopCount -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$c.&. ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$c.|. ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cbit :: GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cbitSizeMaybe ::
    BitBoard.WhitePieces -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cclearBit ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$ccomplement ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$ccomplementBit ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cfiniteBitSize ::
    BitBoard.WhitePieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cisSigned ::
    BitBoard.WhitePieces -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0]) ->_R <GHC.Types.Bool>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cpopCount ::
    BitBoard.WhitePieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$crotate ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$crotateL ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$crotateR ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$csetBit ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cshift ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cshiftL ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cshiftR ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$ctestBit ::
    BitBoard.WhitePieces -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cunsafeShiftL ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cunsafeShiftR ::
    BitBoard.WhitePieces -> GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$cxor ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fBitsWhitePieces_$czeroBits :: BitBoard.WhitePieces
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (BitBoard.NTCo:WhitePieces[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops :: GHC.Enum.Enum BitBoard.Bishops
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Bishops
                  BitBoard.$fEnumBishops_$csucc
                  BitBoard.$fEnumBishops_$cpred
                  BitBoard.$fEnumBishops_$ctoEnum
                  BitBoard.$fEnumBishops_$cfromEnum
                  BitBoard.$fEnumBishops_$cenumFrom
                  BitBoard.$fEnumBishops_$cenumFromThen
                  BitBoard.$fEnumBishops_$cenumFromTo
                  BitBoard.$fEnumBishops_$cenumFromThenTo -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops_$cenumFrom :: BitBoard.Bishops -> [BitBoard.Bishops]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R ([Sym (BitBoard.NTCo:Bishops[0])])_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops_$cenumFromThen ::
    BitBoard.Bishops -> BitBoard.Bishops -> [BitBoard.Bishops]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R ([Sym (BitBoard.NTCo:Bishops[0])])_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops_$cenumFromThenTo ::
    BitBoard.Bishops
    -> BitBoard.Bishops -> BitBoard.Bishops -> [BitBoard.Bishops]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R ([Sym (BitBoard.NTCo:Bishops[0])])_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops_$cenumFromTo ::
    BitBoard.Bishops -> BitBoard.Bishops -> [BitBoard.Bishops]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R ([Sym (BitBoard.NTCo:Bishops[0])])_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops_$cfromEnum :: BitBoard.Bishops -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops_$cpred :: BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops_$csucc :: BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEnumBishops_$ctoEnum :: GHC.Types.Int -> BitBoard.Bishops
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces :: GHC.Enum.Enum BitBoard.BlackPieces
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.BlackPieces
                  BitBoard.$fEnumBlackPieces_$csucc
                  BitBoard.$fEnumBlackPieces_$cpred
                  BitBoard.$fEnumBlackPieces_$ctoEnum
                  BitBoard.$fEnumBlackPieces_$cfromEnum
                  BitBoard.$fEnumBlackPieces_$cenumFrom
                  BitBoard.$fEnumBlackPieces_$cenumFromThen
                  BitBoard.$fEnumBlackPieces_$cenumFromTo
                  BitBoard.$fEnumBlackPieces_$cenumFromThenTo -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces_$cenumFrom ::
    BitBoard.BlackPieces -> [BitBoard.BlackPieces]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R ([Sym (BitBoard.NTCo:BlackPieces[0])])_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces_$cenumFromThen ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> [BitBoard.BlackPieces]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R ([Sym (BitBoard.NTCo:BlackPieces[0])])_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces_$cenumFromThenTo ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces
    -> BitBoard.BlackPieces
    -> [BitBoard.BlackPieces]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R ([Sym (BitBoard.NTCo:BlackPieces[0])])_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces_$cenumFromTo ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> [BitBoard.BlackPieces]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R ([Sym (BitBoard.NTCo:BlackPieces[0])])_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces_$cfromEnum ::
    BitBoard.BlackPieces -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces_$cpred ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces_$csucc ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fEnumBlackPieces_$ctoEnum :: GHC.Types.Int -> BitBoard.BlackPieces
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings :: GHC.Enum.Enum BitBoard.Kings
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Kings
                  BitBoard.$fEnumKings_$csucc
                  BitBoard.$fEnumKings_$cpred
                  BitBoard.$fEnumKings_$ctoEnum
                  BitBoard.$fEnumKings_$cfromEnum
                  BitBoard.$fEnumKings_$cenumFrom
                  BitBoard.$fEnumKings_$cenumFromThen
                  BitBoard.$fEnumKings_$cenumFromTo
                  BitBoard.$fEnumKings_$cenumFromThenTo -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings_$cenumFrom :: BitBoard.Kings -> [BitBoard.Kings]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R ([Sym (BitBoard.NTCo:Kings[0])])_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings_$cenumFromThen ::
    BitBoard.Kings -> BitBoard.Kings -> [BitBoard.Kings]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R ([Sym (BitBoard.NTCo:Kings[0])])_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings_$cenumFromThenTo ::
    BitBoard.Kings
    -> BitBoard.Kings -> BitBoard.Kings -> [BitBoard.Kings]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R ([Sym (BitBoard.NTCo:Kings[0])])_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings_$cenumFromTo ::
    BitBoard.Kings -> BitBoard.Kings -> [BitBoard.Kings]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R ([Sym (BitBoard.NTCo:Kings[0])])_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings_$cfromEnum :: BitBoard.Kings -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings_$cpred :: BitBoard.Kings -> BitBoard.Kings
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings_$csucc :: BitBoard.Kings -> BitBoard.Kings
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEnumKings_$ctoEnum :: GHC.Types.Int -> BitBoard.Kings
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Kings[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights :: GHC.Enum.Enum BitBoard.Knights
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Knights
                  BitBoard.$fEnumKnights_$csucc
                  BitBoard.$fEnumKnights_$cpred
                  BitBoard.$fEnumKnights_$ctoEnum
                  BitBoard.$fEnumKnights_$cfromEnum
                  BitBoard.$fEnumKnights_$cenumFrom
                  BitBoard.$fEnumKnights_$cenumFromThen
                  BitBoard.$fEnumKnights_$cenumFromTo
                  BitBoard.$fEnumKnights_$cenumFromThenTo -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights_$cenumFrom :: BitBoard.Knights -> [BitBoard.Knights]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R ([Sym (BitBoard.NTCo:Knights[0])])_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights_$cenumFromThen ::
    BitBoard.Knights -> BitBoard.Knights -> [BitBoard.Knights]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R ([Sym (BitBoard.NTCo:Knights[0])])_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights_$cenumFromThenTo ::
    BitBoard.Knights
    -> BitBoard.Knights -> BitBoard.Knights -> [BitBoard.Knights]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R ([Sym (BitBoard.NTCo:Knights[0])])_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights_$cenumFromTo ::
    BitBoard.Knights -> BitBoard.Knights -> [BitBoard.Knights]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R ([Sym (BitBoard.NTCo:Knights[0])])_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights_$cfromEnum :: BitBoard.Knights -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights_$cpred :: BitBoard.Knights -> BitBoard.Knights
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights_$csucc :: BitBoard.Knights -> BitBoard.Knights
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEnumKnights_$ctoEnum :: GHC.Types.Int -> BitBoard.Knights
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Knights[0])) -}
21e12671835e529b2308eb064977b020
  $fEnumPawns :: GHC.Enum.Enum BitBoard.Pawns
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Pawns
                  BitBoard.$fEnumPawns_$csucc
                  BitBoard.$fEnumPawns_$cpred
                  BitBoard.$fEnumPawns_$ctoEnum
                  BitBoard.$fEnumPawns_$cfromEnum
                  BitBoard.$fEnumPawns_$cenumFrom
                  BitBoard.$fEnumPawns_$cenumFromThen
                  BitBoard.$fEnumPawns_$cenumFromTo
                  BitBoard.$fEnumPawns_$cenumFromThenTo -}
21e12671835e529b2308eb064977b020
  $fEnumPawns_$cenumFrom :: BitBoard.Pawns -> [BitBoard.Pawns]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R ([Sym (BitBoard.NTCo:Pawns[0])])_R) -}
21e12671835e529b2308eb064977b020
  $fEnumPawns_$cenumFromThen ::
    BitBoard.Pawns -> BitBoard.Pawns -> [BitBoard.Pawns]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R ([Sym (BitBoard.NTCo:Pawns[0])])_R) -}
21e12671835e529b2308eb064977b020
  $fEnumPawns_$cenumFromThenTo ::
    BitBoard.Pawns
    -> BitBoard.Pawns -> BitBoard.Pawns -> [BitBoard.Pawns]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R ([Sym (BitBoard.NTCo:Pawns[0])])_R) -}
21e12671835e529b2308eb064977b020
  $fEnumPawns_$cenumFromTo ::
    BitBoard.Pawns -> BitBoard.Pawns -> [BitBoard.Pawns]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R ([Sym (BitBoard.NTCo:Pawns[0])])_R) -}
21e12671835e529b2308eb064977b020
  $fEnumPawns_$cfromEnum :: BitBoard.Pawns -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
21e12671835e529b2308eb064977b020
  $fEnumPawns_$cpred :: BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fEnumPawns_$csucc :: BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fEnumPawns_$ctoEnum :: GHC.Types.Int -> BitBoard.Pawns
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens :: GHC.Enum.Enum BitBoard.Queens
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Queens
                  BitBoard.$fEnumQueens_$csucc
                  BitBoard.$fEnumQueens_$cpred
                  BitBoard.$fEnumQueens_$ctoEnum
                  BitBoard.$fEnumQueens_$cfromEnum
                  BitBoard.$fEnumQueens_$cenumFrom
                  BitBoard.$fEnumQueens_$cenumFromThen
                  BitBoard.$fEnumQueens_$cenumFromTo
                  BitBoard.$fEnumQueens_$cenumFromThenTo -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens_$cenumFrom :: BitBoard.Queens -> [BitBoard.Queens]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R ([Sym (BitBoard.NTCo:Queens[0])])_R) -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens_$cenumFromThen ::
    BitBoard.Queens -> BitBoard.Queens -> [BitBoard.Queens]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R ([Sym (BitBoard.NTCo:Queens[0])])_R) -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens_$cenumFromThenTo ::
    BitBoard.Queens
    -> BitBoard.Queens -> BitBoard.Queens -> [BitBoard.Queens]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R ([Sym (BitBoard.NTCo:Queens[0])])_R) -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens_$cenumFromTo ::
    BitBoard.Queens -> BitBoard.Queens -> [BitBoard.Queens]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R ([Sym (BitBoard.NTCo:Queens[0])])_R) -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens_$cfromEnum :: BitBoard.Queens -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens_$cpred :: BitBoard.Queens -> BitBoard.Queens
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens_$csucc :: BitBoard.Queens -> BitBoard.Queens
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fEnumQueens_$ctoEnum :: GHC.Types.Int -> BitBoard.Queens
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Queens[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks :: GHC.Enum.Enum BitBoard.Rooks
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Rooks
                  BitBoard.$fEnumRooks_$csucc
                  BitBoard.$fEnumRooks_$cpred
                  BitBoard.$fEnumRooks_$ctoEnum
                  BitBoard.$fEnumRooks_$cfromEnum
                  BitBoard.$fEnumRooks_$cenumFrom
                  BitBoard.$fEnumRooks_$cenumFromThen
                  BitBoard.$fEnumRooks_$cenumFromTo
                  BitBoard.$fEnumRooks_$cenumFromThenTo -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks_$cenumFrom :: BitBoard.Rooks -> [BitBoard.Rooks]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R ([Sym (BitBoard.NTCo:Rooks[0])])_R) -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks_$cenumFromThen ::
    BitBoard.Rooks -> BitBoard.Rooks -> [BitBoard.Rooks]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R ([Sym (BitBoard.NTCo:Rooks[0])])_R) -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks_$cenumFromThenTo ::
    BitBoard.Rooks
    -> BitBoard.Rooks -> BitBoard.Rooks -> [BitBoard.Rooks]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R ([Sym (BitBoard.NTCo:Rooks[0])])_R) -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks_$cenumFromTo ::
    BitBoard.Rooks -> BitBoard.Rooks -> [BitBoard.Rooks]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R ([Sym (BitBoard.NTCo:Rooks[0])])_R) -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks_$cfromEnum :: BitBoard.Rooks -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks_$cpred :: BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks_$csucc :: BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fEnumRooks_$ctoEnum :: GHC.Types.Int -> BitBoard.Rooks
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces :: GHC.Enum.Enum BitBoard.WhitePieces
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.WhitePieces
                  BitBoard.$fEnumWhitePieces_$csucc
                  BitBoard.$fEnumWhitePieces_$cpred
                  BitBoard.$fEnumWhitePieces_$ctoEnum
                  BitBoard.$fEnumWhitePieces_$cfromEnum
                  BitBoard.$fEnumWhitePieces_$cenumFrom
                  BitBoard.$fEnumWhitePieces_$cenumFromThen
                  BitBoard.$fEnumWhitePieces_$cenumFromTo
                  BitBoard.$fEnumWhitePieces_$cenumFromThenTo -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces_$cenumFrom ::
    BitBoard.WhitePieces -> [BitBoard.WhitePieces]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R ([Sym (BitBoard.NTCo:WhitePieces[0])])_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces_$cenumFromThen ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> [BitBoard.WhitePieces]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R ([Sym (BitBoard.NTCo:WhitePieces[0])])_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces_$cenumFromThenTo ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces
    -> BitBoard.WhitePieces
    -> [BitBoard.WhitePieces]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R ([Sym (BitBoard.NTCo:WhitePieces[0])])_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces_$cenumFromTo ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> [BitBoard.WhitePieces]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R ([Sym (BitBoard.NTCo:WhitePieces[0])])_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces_$cfromEnum ::
    BitBoard.WhitePieces -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces_$cpred ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces_$csucc ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fEnumWhitePieces_$ctoEnum :: GHC.Types.Int -> BitBoard.WhitePieces
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEqBishops :: GHC.Classes.Eq BitBoard.Bishops
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Bishops
                  BitBoard.$fEqBishops_$c==
                  BitBoard.$fEqBishops_$c/= -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEqBishops_$c/= ::
    BitBoard.Bishops -> BitBoard.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fEqBishops_$c== ::
    BitBoard.Bishops -> BitBoard.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fEqBlackPieces :: GHC.Classes.Eq BitBoard.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.BlackPieces
                  BitBoard.$fEqBlackPieces_$c==
                  BitBoard.$fEqBlackPieces_$c/= -}
214d009e3b01cec4edbc571a3d095a78
  $fEqBlackPieces_$c/= ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fEqBlackPieces_$c== ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEqKings :: GHC.Classes.Eq BitBoard.Kings
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Kings BitBoard.$fEqKings_$c== BitBoard.$fEqKings_$c/= -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEqKings_$c/= ::
    BitBoard.Kings -> BitBoard.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fEqKings_$c== ::
    BitBoard.Kings -> BitBoard.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEqKnights :: GHC.Classes.Eq BitBoard.Knights
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Knights
                  BitBoard.$fEqKnights_$c==
                  BitBoard.$fEqKnights_$c/= -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEqKnights_$c/= ::
    BitBoard.Knights -> BitBoard.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fEqKnights_$c== ::
    BitBoard.Knights -> BitBoard.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
21e12671835e529b2308eb064977b020
  $fEqPawns :: GHC.Classes.Eq BitBoard.Pawns
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Pawns BitBoard.$fEqPawns_$c== BitBoard.$fEqPawns_$c/= -}
21e12671835e529b2308eb064977b020
  $fEqPawns_$c/= ::
    BitBoard.Pawns -> BitBoard.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
21e12671835e529b2308eb064977b020
  $fEqPawns_$c== ::
    BitBoard.Pawns -> BitBoard.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fEqQueens :: GHC.Classes.Eq BitBoard.Queens
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Queens
                  BitBoard.$fEqQueens_$c==
                  BitBoard.$fEqQueens_$c/= -}
3bb9731176089915c6c1a76348602f8d
  $fEqQueens_$c/= ::
    BitBoard.Queens -> BitBoard.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fEqQueens_$c== ::
    BitBoard.Queens -> BitBoard.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fEqRooks :: GHC.Classes.Eq BitBoard.Rooks
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Rooks BitBoard.$fEqRooks_$c== BitBoard.$fEqRooks_$c/= -}
8fc2a152d06bb354811545e3844d5091
  $fEqRooks_$c/= ::
    BitBoard.Rooks -> BitBoard.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fEqRooks_$c== ::
    BitBoard.Rooks -> BitBoard.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fEqWhitePieces :: GHC.Classes.Eq BitBoard.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.WhitePieces
                  BitBoard.$fEqWhitePieces_$c==
                  BitBoard.$fEqWhitePieces_$c/= -}
26be9dc361e5c347184f3849f546f8ca
  $fEqWhitePieces_$c/= ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fEqWhitePieces_$c== ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fFiniteBitsBishops :: Data.Bits.FiniteBits BitBoard.Bishops
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Bishops
                  BitBoard.$fBitsBishops
                  BitBoard.$fBitsBishops_$cfiniteBitSize
                  BitBoard.$fFiniteBitsBishops_$ccountLeadingZeros
                  BitBoard.$fFiniteBitsBishops_$ccountTrailingZeros -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fFiniteBitsBishops_$ccountLeadingZeros ::
    BitBoard.Bishops -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fFiniteBitsBishops_$ccountTrailingZeros ::
    BitBoard.Bishops -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fFiniteBitsBlackPieces ::
    Data.Bits.FiniteBits BitBoard.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.BlackPieces
                  BitBoard.$fBitsBlackPieces
                  BitBoard.$fBitsBlackPieces_$cfiniteBitSize
                  BitBoard.$fFiniteBitsBlackPieces_$ccountLeadingZeros
                  BitBoard.$fFiniteBitsBlackPieces_$ccountTrailingZeros -}
214d009e3b01cec4edbc571a3d095a78
  $fFiniteBitsBlackPieces_$ccountLeadingZeros ::
    BitBoard.BlackPieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fFiniteBitsBlackPieces_$ccountTrailingZeros ::
    BitBoard.BlackPieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fFiniteBitsKings :: Data.Bits.FiniteBits BitBoard.Kings
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Kings
                  BitBoard.$fBitsKings
                  BitBoard.$fBitsKings_$cfiniteBitSize
                  BitBoard.$fFiniteBitsKings_$ccountLeadingZeros
                  BitBoard.$fFiniteBitsKings_$ccountTrailingZeros -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fFiniteBitsKings_$ccountLeadingZeros ::
    BitBoard.Kings -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fFiniteBitsKings_$ccountTrailingZeros ::
    BitBoard.Kings -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fFiniteBitsKnights :: Data.Bits.FiniteBits BitBoard.Knights
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Knights
                  BitBoard.$fBitsKnights
                  BitBoard.$fBitsKnights_$cfiniteBitSize
                  BitBoard.$fFiniteBitsKnights_$ccountLeadingZeros
                  BitBoard.$fFiniteBitsKnights_$ccountTrailingZeros -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fFiniteBitsKnights_$ccountLeadingZeros ::
    BitBoard.Knights -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fFiniteBitsKnights_$ccountTrailingZeros ::
    BitBoard.Knights -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
21e12671835e529b2308eb064977b020
  $fFiniteBitsPawns :: Data.Bits.FiniteBits BitBoard.Pawns
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Pawns
                  BitBoard.$fBitsPawns
                  BitBoard.$fBitsPawns_$cfiniteBitSize
                  BitBoard.$fFiniteBitsPawns_$ccountLeadingZeros
                  BitBoard.$fFiniteBitsPawns_$ccountTrailingZeros -}
21e12671835e529b2308eb064977b020
  $fFiniteBitsPawns_$ccountLeadingZeros ::
    BitBoard.Pawns -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
21e12671835e529b2308eb064977b020
  $fFiniteBitsPawns_$ccountTrailingZeros ::
    BitBoard.Pawns -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fFiniteBitsQueens :: Data.Bits.FiniteBits BitBoard.Queens
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Queens
                  BitBoard.$fBitsQueens
                  BitBoard.$fBitsQueens_$cfiniteBitSize
                  BitBoard.$fFiniteBitsQueens_$ccountLeadingZeros
                  BitBoard.$fFiniteBitsQueens_$ccountTrailingZeros -}
3bb9731176089915c6c1a76348602f8d
  $fFiniteBitsQueens_$ccountLeadingZeros ::
    BitBoard.Queens -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fFiniteBitsQueens_$ccountTrailingZeros ::
    BitBoard.Queens -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fFiniteBitsRooks :: Data.Bits.FiniteBits BitBoard.Rooks
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Rooks
                  BitBoard.$fBitsRooks
                  BitBoard.$fBitsRooks_$cfiniteBitSize
                  BitBoard.$fFiniteBitsRooks_$ccountLeadingZeros
                  BitBoard.$fFiniteBitsRooks_$ccountTrailingZeros -}
8fc2a152d06bb354811545e3844d5091
  $fFiniteBitsRooks_$ccountLeadingZeros ::
    BitBoard.Rooks -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fFiniteBitsRooks_$ccountTrailingZeros ::
    BitBoard.Rooks -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fFiniteBitsWhitePieces ::
    Data.Bits.FiniteBits BitBoard.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.WhitePieces
                  BitBoard.$fBitsWhitePieces
                  BitBoard.$fBitsWhitePieces_$cfiniteBitSize
                  BitBoard.$fFiniteBitsWhitePieces_$ccountLeadingZeros
                  BitBoard.$fFiniteBitsWhitePieces_$ccountTrailingZeros -}
26be9dc361e5c347184f3849f546f8ca
  $fFiniteBitsWhitePieces_$ccountLeadingZeros ::
    BitBoard.WhitePieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fFiniteBitsWhitePieces_$ccountTrailingZeros ::
    BitBoard.WhitePieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fNumBishops :: GHC.Num.Num BitBoard.Bishops
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Bishops
                  BitBoard.$fNumBishops_$c+
                  BitBoard.$fNumBishops_$c-
                  BitBoard.$fNumBishops_$c*
                  BitBoard.$fNumBishops_$cnegate
                  BitBoard.$fNumBishops_$cabs
                  BitBoard.$fNumBishops_$csignum
                  BitBoard.$fNumBishops_$cfromInteger -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fNumBishops_$c* ::
    BitBoard.Bishops -> BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fNumBishops_$c+ ::
    BitBoard.Bishops -> BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fNumBishops_$c- ::
    BitBoard.Bishops -> BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fNumBishops_$cabs :: BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fNumBishops_$cfromInteger ::
    GHC.Integer.Type.Integer -> BitBoard.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fNumBishops_$cnegate :: BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fNumBishops_$csignum :: BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fNumBlackPieces :: GHC.Num.Num BitBoard.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.BlackPieces
                  BitBoard.$fNumBlackPieces_$c+
                  BitBoard.$fNumBlackPieces_$c-
                  BitBoard.$fNumBlackPieces_$c*
                  BitBoard.$fNumBlackPieces_$cnegate
                  BitBoard.$fNumBlackPieces_$cabs
                  BitBoard.$fNumBlackPieces_$csignum
                  BitBoard.$fNumBlackPieces_$cfromInteger -}
214d009e3b01cec4edbc571a3d095a78
  $fNumBlackPieces_$c* ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fNumBlackPieces_$c+ ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fNumBlackPieces_$c- ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fNumBlackPieces_$cabs ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fNumBlackPieces_$cfromInteger ::
    GHC.Integer.Type.Integer -> BitBoard.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fNumBlackPieces_$cnegate ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fNumBlackPieces_$csignum ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fNumKings :: GHC.Num.Num BitBoard.Kings
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Kings
                  BitBoard.$fNumKings_$c+
                  BitBoard.$fNumKings_$c-
                  BitBoard.$fNumKings_$c*
                  BitBoard.$fNumKings_$cnegate
                  BitBoard.$fNumKings_$cabs
                  BitBoard.$fNumKings_$csignum
                  BitBoard.$fNumKings_$cfromInteger -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fNumKings_$c* ::
    BitBoard.Kings -> BitBoard.Kings -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fNumKings_$c+ ::
    BitBoard.Kings -> BitBoard.Kings -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fNumKings_$c- ::
    BitBoard.Kings -> BitBoard.Kings -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fNumKings_$cabs :: BitBoard.Kings -> BitBoard.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fNumKings_$cfromInteger ::
    GHC.Integer.Type.Integer -> BitBoard.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fNumKings_$cnegate :: BitBoard.Kings -> BitBoard.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fNumKings_$csignum :: BitBoard.Kings -> BitBoard.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0]) ->_R Sym (BitBoard.NTCo:Kings[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fNumKnights :: GHC.Num.Num BitBoard.Knights
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Knights
                  BitBoard.$fNumKnights_$c+
                  BitBoard.$fNumKnights_$c-
                  BitBoard.$fNumKnights_$c*
                  BitBoard.$fNumKnights_$cnegate
                  BitBoard.$fNumKnights_$cabs
                  BitBoard.$fNumKnights_$csignum
                  BitBoard.$fNumKnights_$cfromInteger -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fNumKnights_$c* ::
    BitBoard.Knights -> BitBoard.Knights -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fNumKnights_$c+ ::
    BitBoard.Knights -> BitBoard.Knights -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fNumKnights_$c- ::
    BitBoard.Knights -> BitBoard.Knights -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fNumKnights_$cabs :: BitBoard.Knights -> BitBoard.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fNumKnights_$cfromInteger ::
    GHC.Integer.Type.Integer -> BitBoard.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fNumKnights_$cnegate :: BitBoard.Knights -> BitBoard.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fNumKnights_$csignum :: BitBoard.Knights -> BitBoard.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
21e12671835e529b2308eb064977b020
  $fNumPawns :: GHC.Num.Num BitBoard.Pawns
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Pawns
                  BitBoard.$fNumPawns_$c+
                  BitBoard.$fNumPawns_$c-
                  BitBoard.$fNumPawns_$c*
                  BitBoard.$fNumPawns_$cnegate
                  BitBoard.$fNumPawns_$cabs
                  BitBoard.$fNumPawns_$csignum
                  BitBoard.$fNumPawns_$cfromInteger -}
21e12671835e529b2308eb064977b020
  $fNumPawns_$c* ::
    BitBoard.Pawns -> BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fNumPawns_$c+ ::
    BitBoard.Pawns -> BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fNumPawns_$c- ::
    BitBoard.Pawns -> BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fNumPawns_$cabs :: BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fNumPawns_$cfromInteger ::
    GHC.Integer.Type.Integer -> BitBoard.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fNumPawns_$cnegate :: BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fNumPawns_$csignum :: BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0]) ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fNumQueens :: GHC.Num.Num BitBoard.Queens
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Queens
                  BitBoard.$fNumQueens_$c+
                  BitBoard.$fNumQueens_$c-
                  BitBoard.$fNumQueens_$c*
                  BitBoard.$fNumQueens_$cnegate
                  BitBoard.$fNumQueens_$cabs
                  BitBoard.$fNumQueens_$csignum
                  BitBoard.$fNumQueens_$cfromInteger -}
3bb9731176089915c6c1a76348602f8d
  $fNumQueens_$c* ::
    BitBoard.Queens -> BitBoard.Queens -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fNumQueens_$c+ ::
    BitBoard.Queens -> BitBoard.Queens -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fNumQueens_$c- ::
    BitBoard.Queens -> BitBoard.Queens -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fNumQueens_$cabs :: BitBoard.Queens -> BitBoard.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fNumQueens_$cfromInteger ::
    GHC.Integer.Type.Integer -> BitBoard.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fNumQueens_$cnegate :: BitBoard.Queens -> BitBoard.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fNumQueens_$csignum :: BitBoard.Queens -> BitBoard.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fNumRooks :: GHC.Num.Num BitBoard.Rooks
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Rooks
                  BitBoard.$fNumRooks_$c+
                  BitBoard.$fNumRooks_$c-
                  BitBoard.$fNumRooks_$c*
                  BitBoard.$fNumRooks_$cnegate
                  BitBoard.$fNumRooks_$cabs
                  BitBoard.$fNumRooks_$csignum
                  BitBoard.$fNumRooks_$cfromInteger -}
8fc2a152d06bb354811545e3844d5091
  $fNumRooks_$c* ::
    BitBoard.Rooks -> BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fNumRooks_$c+ ::
    BitBoard.Rooks -> BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fNumRooks_$c- ::
    BitBoard.Rooks -> BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fNumRooks_$cabs :: BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fNumRooks_$cfromInteger ::
    GHC.Integer.Type.Integer -> BitBoard.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fNumRooks_$cnegate :: BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fNumRooks_$csignum :: BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0]) ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fNumWhitePieces :: GHC.Num.Num BitBoard.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.WhitePieces
                  BitBoard.$fNumWhitePieces_$c+
                  BitBoard.$fNumWhitePieces_$c-
                  BitBoard.$fNumWhitePieces_$c*
                  BitBoard.$fNumWhitePieces_$cnegate
                  BitBoard.$fNumWhitePieces_$cabs
                  BitBoard.$fNumWhitePieces_$csignum
                  BitBoard.$fNumWhitePieces_$cfromInteger -}
26be9dc361e5c347184f3849f546f8ca
  $fNumWhitePieces_$c* ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fNumWhitePieces_$c+ ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fNumWhitePieces_$c- ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fNumWhitePieces_$cabs ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fNumWhitePieces_$cfromInteger ::
    GHC.Integer.Type.Integer -> BitBoard.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fNumWhitePieces_$cnegate ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fNumWhitePieces_$csignum ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fOrdBishops :: GHC.Classes.Ord BitBoard.Bishops
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Bishops
                  BitBoard.$fEqBishops
                  BitBoard.$fOrdBishops_$ccompare
                  BitBoard.$fOrdBishops_$c<
                  BitBoard.$fOrdBishops_$c<=
                  BitBoard.$fOrdBishops_$c>
                  BitBoard.$fOrdBishops_$c>=
                  BitBoard.$fOrdBishops_$cmax
                  BitBoard.$fOrdBishops_$cmin -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fOrdBishops_$c< ::
    BitBoard.Bishops -> BitBoard.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fOrdBishops_$c<= ::
    BitBoard.Bishops -> BitBoard.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fOrdBishops_$c> ::
    BitBoard.Bishops -> BitBoard.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fOrdBishops_$c>= ::
    BitBoard.Bishops -> BitBoard.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fOrdBishops_$ccompare ::
    BitBoard.Bishops -> BitBoard.Bishops -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R <GHC.Types.Ordering>_R) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fOrdBishops_$cmax ::
    BitBoard.Bishops -> BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fOrdBishops_$cmin ::
    BitBoard.Bishops -> BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])
                 ->_R Sym (BitBoard.NTCo:Bishops[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fOrdBlackPieces :: GHC.Classes.Ord BitBoard.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.BlackPieces
                  BitBoard.$fEqBlackPieces
                  BitBoard.$fOrdBlackPieces_$ccompare
                  BitBoard.$fOrdBlackPieces_$c<
                  BitBoard.$fOrdBlackPieces_$c<=
                  BitBoard.$fOrdBlackPieces_$c>
                  BitBoard.$fOrdBlackPieces_$c>=
                  BitBoard.$fOrdBlackPieces_$cmax
                  BitBoard.$fOrdBlackPieces_$cmin -}
214d009e3b01cec4edbc571a3d095a78
  $fOrdBlackPieces_$c< ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fOrdBlackPieces_$c<= ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fOrdBlackPieces_$c> ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fOrdBlackPieces_$c>= ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fOrdBlackPieces_$ccompare ::
    BitBoard.BlackPieces -> BitBoard.BlackPieces -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Ordering>_R) -}
214d009e3b01cec4edbc571a3d095a78
  $fOrdBlackPieces_$cmax ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
214d009e3b01cec4edbc571a3d095a78
  $fOrdBlackPieces_$cmin ::
    BitBoard.BlackPieces
    -> BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])
                 ->_R Sym (BitBoard.NTCo:BlackPieces[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fOrdKings :: GHC.Classes.Ord BitBoard.Kings
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Kings
                  BitBoard.$fEqKings
                  BitBoard.$fOrdKings_$ccompare
                  BitBoard.$fOrdKings_$c<
                  BitBoard.$fOrdKings_$c<=
                  BitBoard.$fOrdKings_$c>
                  BitBoard.$fOrdKings_$c>=
                  BitBoard.$fOrdKings_$cmax
                  BitBoard.$fOrdKings_$cmin -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fOrdKings_$c< ::
    BitBoard.Kings -> BitBoard.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fOrdKings_$c<= ::
    BitBoard.Kings -> BitBoard.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fOrdKings_$c> ::
    BitBoard.Kings -> BitBoard.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fOrdKings_$c>= ::
    BitBoard.Kings -> BitBoard.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fOrdKings_$ccompare ::
    BitBoard.Kings -> BitBoard.Kings -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R <GHC.Types.Ordering>_R) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fOrdKings_$cmax ::
    BitBoard.Kings -> BitBoard.Kings -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fOrdKings_$cmin ::
    BitBoard.Kings -> BitBoard.Kings -> BitBoard.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])
                 ->_R Sym (BitBoard.NTCo:Kings[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fOrdKnights :: GHC.Classes.Ord BitBoard.Knights
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Knights
                  BitBoard.$fEqKnights
                  BitBoard.$fOrdKnights_$ccompare
                  BitBoard.$fOrdKnights_$c<
                  BitBoard.$fOrdKnights_$c<=
                  BitBoard.$fOrdKnights_$c>
                  BitBoard.$fOrdKnights_$c>=
                  BitBoard.$fOrdKnights_$cmax
                  BitBoard.$fOrdKnights_$cmin -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fOrdKnights_$c< ::
    BitBoard.Knights -> BitBoard.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fOrdKnights_$c<= ::
    BitBoard.Knights -> BitBoard.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fOrdKnights_$c> ::
    BitBoard.Knights -> BitBoard.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fOrdKnights_$c>= ::
    BitBoard.Knights -> BitBoard.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fOrdKnights_$ccompare ::
    BitBoard.Knights -> BitBoard.Knights -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R <GHC.Types.Ordering>_R) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fOrdKnights_$cmax ::
    BitBoard.Knights -> BitBoard.Knights -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fOrdKnights_$cmin ::
    BitBoard.Knights -> BitBoard.Knights -> BitBoard.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])
                 ->_R Sym (BitBoard.NTCo:Knights[0])) -}
21e12671835e529b2308eb064977b020
  $fOrdPawns :: GHC.Classes.Ord BitBoard.Pawns
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Pawns
                  BitBoard.$fEqPawns
                  BitBoard.$fOrdPawns_$ccompare
                  BitBoard.$fOrdPawns_$c<
                  BitBoard.$fOrdPawns_$c<=
                  BitBoard.$fOrdPawns_$c>
                  BitBoard.$fOrdPawns_$c>=
                  BitBoard.$fOrdPawns_$cmax
                  BitBoard.$fOrdPawns_$cmin -}
21e12671835e529b2308eb064977b020
  $fOrdPawns_$c< ::
    BitBoard.Pawns -> BitBoard.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
21e12671835e529b2308eb064977b020
  $fOrdPawns_$c<= ::
    BitBoard.Pawns -> BitBoard.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
21e12671835e529b2308eb064977b020
  $fOrdPawns_$c> ::
    BitBoard.Pawns -> BitBoard.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
21e12671835e529b2308eb064977b020
  $fOrdPawns_$c>= ::
    BitBoard.Pawns -> BitBoard.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
21e12671835e529b2308eb064977b020
  $fOrdPawns_$ccompare ::
    BitBoard.Pawns -> BitBoard.Pawns -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R <GHC.Types.Ordering>_R) -}
21e12671835e529b2308eb064977b020
  $fOrdPawns_$cmax ::
    BitBoard.Pawns -> BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
21e12671835e529b2308eb064977b020
  $fOrdPawns_$cmin ::
    BitBoard.Pawns -> BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])
                 ->_R Sym (BitBoard.NTCo:Pawns[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fOrdQueens :: GHC.Classes.Ord BitBoard.Queens
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Queens
                  BitBoard.$fEqQueens
                  BitBoard.$fOrdQueens_$ccompare
                  BitBoard.$fOrdQueens_$c<
                  BitBoard.$fOrdQueens_$c<=
                  BitBoard.$fOrdQueens_$c>
                  BitBoard.$fOrdQueens_$c>=
                  BitBoard.$fOrdQueens_$cmax
                  BitBoard.$fOrdQueens_$cmin -}
3bb9731176089915c6c1a76348602f8d
  $fOrdQueens_$c< ::
    BitBoard.Queens -> BitBoard.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fOrdQueens_$c<= ::
    BitBoard.Queens -> BitBoard.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fOrdQueens_$c> ::
    BitBoard.Queens -> BitBoard.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fOrdQueens_$c>= ::
    BitBoard.Queens -> BitBoard.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fOrdQueens_$ccompare ::
    BitBoard.Queens -> BitBoard.Queens -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R <GHC.Types.Ordering>_R) -}
3bb9731176089915c6c1a76348602f8d
  $fOrdQueens_$cmax ::
    BitBoard.Queens -> BitBoard.Queens -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
3bb9731176089915c6c1a76348602f8d
  $fOrdQueens_$cmin ::
    BitBoard.Queens -> BitBoard.Queens -> BitBoard.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])
                 ->_R Sym (BitBoard.NTCo:Queens[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fOrdRooks :: GHC.Classes.Ord BitBoard.Rooks
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Rooks
                  BitBoard.$fEqRooks
                  BitBoard.$fOrdRooks_$ccompare
                  BitBoard.$fOrdRooks_$c<
                  BitBoard.$fOrdRooks_$c<=
                  BitBoard.$fOrdRooks_$c>
                  BitBoard.$fOrdRooks_$c>=
                  BitBoard.$fOrdRooks_$cmax
                  BitBoard.$fOrdRooks_$cmin -}
8fc2a152d06bb354811545e3844d5091
  $fOrdRooks_$c< ::
    BitBoard.Rooks -> BitBoard.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fOrdRooks_$c<= ::
    BitBoard.Rooks -> BitBoard.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fOrdRooks_$c> ::
    BitBoard.Rooks -> BitBoard.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fOrdRooks_$c>= ::
    BitBoard.Rooks -> BitBoard.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fOrdRooks_$ccompare ::
    BitBoard.Rooks -> BitBoard.Rooks -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R <GHC.Types.Ordering>_R) -}
8fc2a152d06bb354811545e3844d5091
  $fOrdRooks_$cmax ::
    BitBoard.Rooks -> BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
8fc2a152d06bb354811545e3844d5091
  $fOrdRooks_$cmin ::
    BitBoard.Rooks -> BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])
                 ->_R Sym (BitBoard.NTCo:Rooks[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fOrdWhitePieces :: GHC.Classes.Ord BitBoard.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.WhitePieces
                  BitBoard.$fEqWhitePieces
                  BitBoard.$fOrdWhitePieces_$ccompare
                  BitBoard.$fOrdWhitePieces_$c<
                  BitBoard.$fOrdWhitePieces_$c<=
                  BitBoard.$fOrdWhitePieces_$c>
                  BitBoard.$fOrdWhitePieces_$c>=
                  BitBoard.$fOrdWhitePieces_$cmax
                  BitBoard.$fOrdWhitePieces_$cmin -}
26be9dc361e5c347184f3849f546f8ca
  $fOrdWhitePieces_$c< ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fOrdWhitePieces_$c<= ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fOrdWhitePieces_$c> ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fOrdWhitePieces_$c>= ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fOrdWhitePieces_$ccompare ::
    BitBoard.WhitePieces -> BitBoard.WhitePieces -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Ordering>_R) -}
26be9dc361e5c347184f3849f546f8ca
  $fOrdWhitePieces_$cmax ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
26be9dc361e5c347184f3849f546f8ca
  $fOrdWhitePieces_$cmin ::
    BitBoard.WhitePieces
    -> BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])
                 ->_R Sym (BitBoard.NTCo:WhitePieces[0])) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fShowBishops :: GHC.Show.Show BitBoard.Bishops
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Bishops
                  BitBoard.$fShowBishops_$cshowsPrec
                  BitBoard.$fShowBishops_$cshow
                  BitBoard.$fShowBishops_$cshowList -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fShowBishops1 :: BitBoard.Bishops -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BitBoard.Bishops ->
                 BitBoard.$w$cshowsPrec 0 w) -}
0121086e348e3d5abfe901a75023a795
  $fShowBishops2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
b19cce54b2e7ad6b313ecaef301e2cc7
  $fShowBishops3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unB = "#) -}
8677009c7d4c1c41ea24994a340e8e9d
  $fShowBishops4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "B {"#) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fShowBishops_$cshow :: BitBoard.Bishops -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BitBoard.Bishops ->
                 BitBoard.$fShowBishops_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fShowBishops_$cshowList :: [BitBoard.Bishops] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BitBoard.Bishops
                   BitBoard.$fShowBishops1) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $fShowBishops_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.Bishops -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BitBoard.Bishops ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BitBoard.$w$cshowsPrec ww1 w1 }) -}
c62610f89699eb56e09bd4ec8ba3a61a
  $fShowBitBoard :: GHC.Show.Show BitBoard.BitBoard
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.BitBoard
                  BitBoard.$fShowBitBoard_$cshowsPrec
                  BitBoard.showBitBoard
                  BitBoard.$fShowBitBoard_$cshowList -}
c62610f89699eb56e09bd4ec8ba3a61a
  $fShowBitBoard_$cshowList :: [BitBoard.BitBoard] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [BitBoard.BitBoard] s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ BitBoard.BitBoard
                   (\ b :: BitBoard.BitBoard ->
                    GHC.Base.++ @ GHC.Types.Char (BitBoard.showBitBoard b))
                   ls
                   s) -}
c62610f89699eb56e09bd4ec8ba3a61a
  $fShowBitBoard_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.BitBoard -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,A><L,1*U(U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Types.Int b :: BitBoard.BitBoard ->
                 GHC.Base.++ @ GHC.Types.Char (BitBoard.showBitBoard b)) -}
214d009e3b01cec4edbc571a3d095a78
  $fShowBlackPieces :: GHC.Show.Show BitBoard.BlackPieces
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.BlackPieces
                  BitBoard.$fShowBlackPieces_$cshowsPrec
                  BitBoard.$fShowBlackPieces_$cshow
                  BitBoard.$fShowBlackPieces_$cshowList -}
214d009e3b01cec4edbc571a3d095a78
  $fShowBlackPieces1 :: BitBoard.BlackPieces -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BitBoard.BlackPieces ->
                 BitBoard.$w$cshowsPrec1 0 w) -}
a475e72087c1e9498b2f03fb22c71529
  $fShowBlackPieces2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unBC = "#) -}
1a843bb311fd0187d558160ba7e8c6ce
  $fShowBlackPieces3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BC {"#) -}
214d009e3b01cec4edbc571a3d095a78
  $fShowBlackPieces_$cshow :: BitBoard.BlackPieces -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BitBoard.BlackPieces ->
                 BitBoard.$fShowBlackPieces_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
214d009e3b01cec4edbc571a3d095a78
  $fShowBlackPieces_$cshowList ::
    [BitBoard.BlackPieces] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BitBoard.BlackPieces
                   BitBoard.$fShowBlackPieces1) -}
214d009e3b01cec4edbc571a3d095a78
  $fShowBlackPieces_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.BlackPieces -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BitBoard.BlackPieces ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BitBoard.$w$cshowsPrec1 ww1 w1 }) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fShowKings :: GHC.Show.Show BitBoard.Kings
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Kings
                  BitBoard.$fShowKings_$cshowsPrec
                  BitBoard.$fShowKings_$cshow
                  BitBoard.$fShowKings_$cshowList -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fShowKings1 :: BitBoard.Kings -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BitBoard.Kings ->
                 BitBoard.$w$cshowsPrec2 0 w) -}
2d320badc8c214c8efaec4ea80661cad
  $fShowKings2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unK = "#) -}
69e1cea50bd70997e6b3825a75b0e98f
  $fShowKings3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "K {"#) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fShowKings_$cshow :: BitBoard.Kings -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BitBoard.Kings ->
                 BitBoard.$fShowKings_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fShowKings_$cshowList :: [BitBoard.Kings] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BitBoard.Kings
                   BitBoard.$fShowKings1) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $fShowKings_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.Kings -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BitBoard.Kings ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BitBoard.$w$cshowsPrec2 ww1 w1 }) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fShowKnights :: GHC.Show.Show BitBoard.Knights
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Knights
                  BitBoard.$fShowKnights_$cshowsPrec
                  BitBoard.$fShowKnights_$cshow
                  BitBoard.$fShowKnights_$cshowList -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fShowKnights1 :: BitBoard.Knights -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BitBoard.Knights ->
                 BitBoard.$w$cshowsPrec3 0 w) -}
8be4599eb0488e49bc59143933b00818
  $fShowKnights2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unN = "#) -}
4e43c7a0bf2483a14ae4e30fc5854d54
  $fShowKnights3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N {"#) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fShowKnights_$cshow :: BitBoard.Knights -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BitBoard.Knights ->
                 BitBoard.$fShowKnights_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fShowKnights_$cshowList :: [BitBoard.Knights] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BitBoard.Knights
                   BitBoard.$fShowKnights1) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $fShowKnights_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.Knights -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BitBoard.Knights ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BitBoard.$w$cshowsPrec3 ww1 w1 }) -}
21e12671835e529b2308eb064977b020
  $fShowPawns :: GHC.Show.Show BitBoard.Pawns
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Pawns
                  BitBoard.$fShowPawns_$cshowsPrec
                  BitBoard.$fShowPawns_$cshow
                  BitBoard.$fShowPawns_$cshowList -}
21e12671835e529b2308eb064977b020
  $fShowPawns1 :: BitBoard.Pawns -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BitBoard.Pawns ->
                 BitBoard.$w$cshowsPrec4 0 w) -}
745952d5d84da925eb499504de3f24d5
  $fShowPawns2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unP = "#) -}
15fd12d1e11f108f68a2576e8044d4ca
  $fShowPawns3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "P {"#) -}
21e12671835e529b2308eb064977b020
  $fShowPawns_$cshow :: BitBoard.Pawns -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BitBoard.Pawns ->
                 BitBoard.$fShowPawns_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
21e12671835e529b2308eb064977b020
  $fShowPawns_$cshowList :: [BitBoard.Pawns] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BitBoard.Pawns
                   BitBoard.$fShowPawns1) -}
21e12671835e529b2308eb064977b020
  $fShowPawns_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.Pawns -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BitBoard.Pawns ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BitBoard.$w$cshowsPrec4 ww1 w1 }) -}
3bb9731176089915c6c1a76348602f8d
  $fShowQueens :: GHC.Show.Show BitBoard.Queens
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Queens
                  BitBoard.$fShowQueens_$cshowsPrec
                  BitBoard.$fShowQueens_$cshow
                  BitBoard.$fShowQueens_$cshowList -}
3bb9731176089915c6c1a76348602f8d
  $fShowQueens1 :: BitBoard.Queens -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BitBoard.Queens ->
                 BitBoard.$w$cshowsPrec5 0 w) -}
e2f03a136ece514585bb0b465e3a5765
  $fShowQueens2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unQ = "#) -}
371c6bf09ba4492730af7975ebaf781f
  $fShowQueens3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Q {"#) -}
3bb9731176089915c6c1a76348602f8d
  $fShowQueens_$cshow :: BitBoard.Queens -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BitBoard.Queens ->
                 BitBoard.$fShowQueens_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3bb9731176089915c6c1a76348602f8d
  $fShowQueens_$cshowList :: [BitBoard.Queens] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BitBoard.Queens
                   BitBoard.$fShowQueens1) -}
3bb9731176089915c6c1a76348602f8d
  $fShowQueens_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.Queens -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BitBoard.Queens ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BitBoard.$w$cshowsPrec5 ww1 w1 }) -}
8fc2a152d06bb354811545e3844d5091
  $fShowRooks :: GHC.Show.Show BitBoard.Rooks
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.Rooks
                  BitBoard.$fShowRooks_$cshowsPrec
                  BitBoard.$fShowRooks_$cshow
                  BitBoard.$fShowRooks_$cshowList -}
8fc2a152d06bb354811545e3844d5091
  $fShowRooks1 :: BitBoard.Rooks -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BitBoard.Rooks ->
                 BitBoard.$w$cshowsPrec6 0 w) -}
c648789a47685134dea8b6907dc2a654
  $fShowRooks2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unR = "#) -}
b1c87a10d2dd64bb3b86ca04522338a0
  $fShowRooks3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "R {"#) -}
8fc2a152d06bb354811545e3844d5091
  $fShowRooks_$cshow :: BitBoard.Rooks -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BitBoard.Rooks ->
                 BitBoard.$fShowRooks_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8fc2a152d06bb354811545e3844d5091
  $fShowRooks_$cshowList :: [BitBoard.Rooks] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BitBoard.Rooks
                   BitBoard.$fShowRooks1) -}
8fc2a152d06bb354811545e3844d5091
  $fShowRooks_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.Rooks -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BitBoard.Rooks ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BitBoard.$w$cshowsPrec6 ww1 w1 }) -}
26be9dc361e5c347184f3849f546f8ca
  $fShowWhitePieces :: GHC.Show.Show BitBoard.WhitePieces
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BitBoard.WhitePieces
                  BitBoard.$fShowWhitePieces_$cshowsPrec
                  BitBoard.$fShowWhitePieces_$cshow
                  BitBoard.$fShowWhitePieces_$cshowList -}
26be9dc361e5c347184f3849f546f8ca
  $fShowWhitePieces1 :: BitBoard.WhitePieces -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: BitBoard.WhitePieces ->
                 BitBoard.$w$cshowsPrec7 0 w) -}
bc9da21ac87920f96ab1302f05dc833b
  $fShowWhitePieces2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unWC = "#) -}
241147d5a3305cb93edfad8115eea256
  $fShowWhitePieces3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WC {"#) -}
26be9dc361e5c347184f3849f546f8ca
  $fShowWhitePieces_$cshow :: BitBoard.WhitePieces -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BitBoard.WhitePieces ->
                 BitBoard.$fShowWhitePieces_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
26be9dc361e5c347184f3849f546f8ca
  $fShowWhitePieces_$cshowList ::
    [BitBoard.WhitePieces] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BitBoard.WhitePieces
                   BitBoard.$fShowWhitePieces1) -}
26be9dc361e5c347184f3849f546f8ca
  $fShowWhitePieces_$cshowsPrec ::
    GHC.Types.Int -> BitBoard.WhitePieces -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: BitBoard.WhitePieces ->
                 case w of ww { GHC.Types.I# ww1 ->
                 BitBoard.$w$cshowsPrec7 ww1 w1 }) -}
6002fd05bf29e16058e7874c3277a9f7
  $s$dmshowList1 :: BitBoard.BitBoard -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ b :: BitBoard.BitBoard ->
                 GHC.Base.++ @ GHC.Types.Char (BitBoard.showBitBoard b)) -}
dc13b2e139ed7ccc557a2d0cc8c78834
  $w$cshowsPrec ::
    GHC.Prim.Int# -> BitBoard.Bishops -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: BitBoard.Bishops ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (BitBoard.NTCo:Bishops[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BitBoard.$fShowBishops4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          BitBoard.$fShowBishops3
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     BitBoard.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
214d009e3b01cec4edbc571a3d095a78
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> BitBoard.BlackPieces -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: BitBoard.BlackPieces ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (BitBoard.NTCo:BlackPieces[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BitBoard.$fShowBlackPieces3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          BitBoard.$fShowBlackPieces2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     BitBoard.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
22cd6ea0a64aa819b25cf3a0ba0b543c
  $w$cshowsPrec2 :: GHC.Prim.Int# -> BitBoard.Kings -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: BitBoard.Kings ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (BitBoard.NTCo:Kings[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BitBoard.$fShowKings3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          BitBoard.$fShowKings2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     BitBoard.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
176e5ba8b2e9f3d8223125f26bfd2760
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> BitBoard.Knights -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: BitBoard.Knights ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (BitBoard.NTCo:Knights[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BitBoard.$fShowKnights3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          BitBoard.$fShowKnights2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     BitBoard.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
21e12671835e529b2308eb064977b020
  $w$cshowsPrec4 :: GHC.Prim.Int# -> BitBoard.Pawns -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: BitBoard.Pawns ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (BitBoard.NTCo:Pawns[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BitBoard.$fShowPawns3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          BitBoard.$fShowPawns2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     BitBoard.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
3bb9731176089915c6c1a76348602f8d
  $w$cshowsPrec5 ::
    GHC.Prim.Int# -> BitBoard.Queens -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: BitBoard.Queens ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (BitBoard.NTCo:Queens[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BitBoard.$fShowQueens3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          BitBoard.$fShowQueens2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     BitBoard.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
8fc2a152d06bb354811545e3844d5091
  $w$cshowsPrec6 :: GHC.Prim.Int# -> BitBoard.Rooks -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: BitBoard.Rooks ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (BitBoard.NTCo:Rooks[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BitBoard.$fShowRooks3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          BitBoard.$fShowRooks2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     BitBoard.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
26be9dc361e5c347184f3849f546f8ca
  $w$cshowsPrec7 ::
    GHC.Prim.Int# -> BitBoard.WhitePieces -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: BitBoard.WhitePieces ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (BitBoard.NTCo:WhitePieces[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       BitBoard.$fShowWhitePieces3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          BitBoard.$fShowWhitePieces2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     BitBoard.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
ffee3be9b74934b59b637fc2bae7781f
  $wshowBitBoard ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Base.String
  {- Arity: 8, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
dc13b2e139ed7ccc557a2d0cc8c78834
  newtype Bishops = B {unB :: GHC.Word.Word64}
c62610f89699eb56e09bd4ec8ba3a61a
  data BitBoard
    = BitBoard ! {-# UNPACK #-}(BitBoard.NTCo:BlackPieces[0])BitBoard.BlackPieces
               ! {-# UNPACK #-}(BitBoard.NTCo:WhitePieces[0])BitBoard.WhitePieces
               ! {-# UNPACK #-}(BitBoard.NTCo:Pawns[0])BitBoard.Pawns
               ! {-# UNPACK #-}(BitBoard.NTCo:Rooks[0])BitBoard.Rooks
               ! {-# UNPACK #-}(BitBoard.NTCo:Knights[0])BitBoard.Knights
               ! {-# UNPACK #-}(BitBoard.NTCo:Bishops[0])BitBoard.Bishops
               ! {-# UNPACK #-}(BitBoard.NTCo:Queens[0])BitBoard.Queens
               ! {-# UNPACK #-}(BitBoard.NTCo:Kings[0])BitBoard.Kings
214d009e3b01cec4edbc571a3d095a78
  newtype BlackPieces = BC {unBC :: GHC.Word.Word64}
22cd6ea0a64aa819b25cf3a0ba0b543c
  newtype Kings = K {unK :: GHC.Word.Word64}
176e5ba8b2e9f3d8223125f26bfd2760
  newtype Knights = N {unN :: GHC.Word.Word64}
21e12671835e529b2308eb064977b020
  newtype Pawns = P {unP :: GHC.Word.Word64}
3bb9731176089915c6c1a76348602f8d
  newtype Queens = Q {unQ :: GHC.Word.Word64}
8fc2a152d06bb354811545e3844d5091
  newtype Rooks = R {unR :: GHC.Word.Word64}
26be9dc361e5c347184f3849f546f8ca
  newtype WhitePieces = WC {unWC :: GHC.Word.Word64}
8f5cc275542b78164727c76b071a111e
  emptyBoard :: BitBoard.BitBoard
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (BitBoard.BitBoard
                   __word 0
                   __word 0
                   __word 0
                   __word 0
                   __word 0
                   __word 0
                   __word 0
                   __word 0) -}
c62610f89699eb56e09bd4ec8ba3a61a
  showBitBoard :: BitBoard.BitBoard -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: BitBoard.BitBoard ->
                 case w of ww { BitBoard.BitBoard ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 BitBoard.$wshowBitBoard ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 }) -}
57ebd1d08d08540d34e412102c7eaecf
  unB :: BitBoard.Bishops -> GHC.Word.Word64
  RecSel BitBoard.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                BitBoard.unB1
                  `cast`
                (<BitBoard.Bishops>_R ->_R BitBoard.NTCo:Bishops[0]) -}
b0da2d61c32398237377955bbb416e07
  unB1 :: BitBoard.Bishops -> BitBoard.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BitBoard.Bishops -> ds) -}
5e18f0b35944b1b6bcd400c643de27fd
  unBC :: BitBoard.BlackPieces -> GHC.Word.Word64
  RecSel BitBoard.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                BitBoard.unBC1
                  `cast`
                (<BitBoard.BlackPieces>_R ->_R BitBoard.NTCo:BlackPieces[0]) -}
5e1d46d3cf495a8707656c09a66a69c9
  unBC1 :: BitBoard.BlackPieces -> BitBoard.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BitBoard.BlackPieces -> ds) -}
d7b12094d159c6adfe43f445fc27c410
  unK :: BitBoard.Kings -> GHC.Word.Word64
  RecSel BitBoard.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                BitBoard.unK1
                  `cast`
                (<BitBoard.Kings>_R ->_R BitBoard.NTCo:Kings[0]) -}
9548ec5e90dbdc545ce3a62ce86cfbe4
  unK1 :: BitBoard.Kings -> BitBoard.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BitBoard.Kings -> ds) -}
92e8c0c067acf831cfb1d25a32d41dc7
  unN :: BitBoard.Knights -> GHC.Word.Word64
  RecSel BitBoard.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                BitBoard.unN1
                  `cast`
                (<BitBoard.Knights>_R ->_R BitBoard.NTCo:Knights[0]) -}
7806ecc688f7515d797f1250bf0f12f8
  unN1 :: BitBoard.Knights -> BitBoard.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BitBoard.Knights -> ds) -}
c2bcbb666967abea7d30eacffae4d388
  unP :: BitBoard.Pawns -> GHC.Word.Word64
  RecSel BitBoard.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                BitBoard.unP1
                  `cast`
                (<BitBoard.Pawns>_R ->_R BitBoard.NTCo:Pawns[0]) -}
64cfa48ac6bd6632ba12bca553676c69
  unP1 :: BitBoard.Pawns -> BitBoard.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BitBoard.Pawns -> ds) -}
924247201fd62958ac09b300c4a5880b
  unQ :: BitBoard.Queens -> GHC.Word.Word64
  RecSel BitBoard.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                BitBoard.unQ1
                  `cast`
                (<BitBoard.Queens>_R ->_R BitBoard.NTCo:Queens[0]) -}
6a00e9c50954f42b143a7b397320c138
  unQ1 :: BitBoard.Queens -> BitBoard.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BitBoard.Queens -> ds) -}
e8fed3daef487f2e858ebd0038284b89
  unR :: BitBoard.Rooks -> GHC.Word.Word64
  RecSel BitBoard.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                BitBoard.unR1
                  `cast`
                (<BitBoard.Rooks>_R ->_R BitBoard.NTCo:Rooks[0]) -}
a8d63a0b23059b0a69d6c8d7ccd723c8
  unR1 :: BitBoard.Rooks -> BitBoard.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BitBoard.Rooks -> ds) -}
783247b5a597697f3b710b7a7393b9ad
  unWC :: BitBoard.WhitePieces -> GHC.Word.Word64
  RecSel BitBoard.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                BitBoard.unWC1
                  `cast`
                (<BitBoard.WhitePieces>_R ->_R BitBoard.NTCo:WhitePieces[0]) -}
b0fd0483ad4b3dbbf85d7050c8f8a8b2
  unWC1 :: BitBoard.WhitePieces -> BitBoard.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: BitBoard.WhitePieces -> ds) -}
instance Data.Bits.Bits [BitBoard.Bishops] = BitBoard.$fBitsBishops
instance Data.Bits.Bits [BitBoard.BlackPieces]
  = BitBoard.$fBitsBlackPieces
instance Data.Bits.Bits [BitBoard.Kings] = BitBoard.$fBitsKings
instance Data.Bits.Bits [BitBoard.Knights] = BitBoard.$fBitsKnights
instance Data.Bits.Bits [BitBoard.Pawns] = BitBoard.$fBitsPawns
instance Data.Bits.Bits [BitBoard.Queens] = BitBoard.$fBitsQueens
instance Data.Bits.Bits [BitBoard.Rooks] = BitBoard.$fBitsRooks
instance Data.Bits.Bits [BitBoard.WhitePieces]
  = BitBoard.$fBitsWhitePieces
instance GHC.Enum.Enum [BitBoard.Bishops] = BitBoard.$fEnumBishops
instance GHC.Enum.Enum [BitBoard.BlackPieces]
  = BitBoard.$fEnumBlackPieces
instance GHC.Enum.Enum [BitBoard.Kings] = BitBoard.$fEnumKings
instance GHC.Enum.Enum [BitBoard.Knights] = BitBoard.$fEnumKnights
instance GHC.Enum.Enum [BitBoard.Pawns] = BitBoard.$fEnumPawns
instance GHC.Enum.Enum [BitBoard.Queens] = BitBoard.$fEnumQueens
instance GHC.Enum.Enum [BitBoard.Rooks] = BitBoard.$fEnumRooks
instance GHC.Enum.Enum [BitBoard.WhitePieces]
  = BitBoard.$fEnumWhitePieces
instance GHC.Classes.Eq [BitBoard.Bishops] = BitBoard.$fEqBishops
instance GHC.Classes.Eq [BitBoard.BlackPieces]
  = BitBoard.$fEqBlackPieces
instance GHC.Classes.Eq [BitBoard.Kings] = BitBoard.$fEqKings
instance GHC.Classes.Eq [BitBoard.Knights] = BitBoard.$fEqKnights
instance GHC.Classes.Eq [BitBoard.Pawns] = BitBoard.$fEqPawns
instance GHC.Classes.Eq [BitBoard.Queens] = BitBoard.$fEqQueens
instance GHC.Classes.Eq [BitBoard.Rooks] = BitBoard.$fEqRooks
instance GHC.Classes.Eq [BitBoard.WhitePieces]
  = BitBoard.$fEqWhitePieces
instance Data.Bits.FiniteBits [BitBoard.Bishops]
  = BitBoard.$fFiniteBitsBishops
instance Data.Bits.FiniteBits [BitBoard.BlackPieces]
  = BitBoard.$fFiniteBitsBlackPieces
instance Data.Bits.FiniteBits [BitBoard.Kings]
  = BitBoard.$fFiniteBitsKings
instance Data.Bits.FiniteBits [BitBoard.Knights]
  = BitBoard.$fFiniteBitsKnights
instance Data.Bits.FiniteBits [BitBoard.Pawns]
  = BitBoard.$fFiniteBitsPawns
instance Data.Bits.FiniteBits [BitBoard.Queens]
  = BitBoard.$fFiniteBitsQueens
instance Data.Bits.FiniteBits [BitBoard.Rooks]
  = BitBoard.$fFiniteBitsRooks
instance Data.Bits.FiniteBits [BitBoard.WhitePieces]
  = BitBoard.$fFiniteBitsWhitePieces
instance GHC.Num.Num [BitBoard.Bishops] = BitBoard.$fNumBishops
instance GHC.Num.Num [BitBoard.BlackPieces]
  = BitBoard.$fNumBlackPieces
instance GHC.Num.Num [BitBoard.Kings] = BitBoard.$fNumKings
instance GHC.Num.Num [BitBoard.Knights] = BitBoard.$fNumKnights
instance GHC.Num.Num [BitBoard.Pawns] = BitBoard.$fNumPawns
instance GHC.Num.Num [BitBoard.Queens] = BitBoard.$fNumQueens
instance GHC.Num.Num [BitBoard.Rooks] = BitBoard.$fNumRooks
instance GHC.Num.Num [BitBoard.WhitePieces]
  = BitBoard.$fNumWhitePieces
instance GHC.Classes.Ord [BitBoard.Bishops] = BitBoard.$fOrdBishops
instance GHC.Classes.Ord [BitBoard.BlackPieces]
  = BitBoard.$fOrdBlackPieces
instance GHC.Classes.Ord [BitBoard.Kings] = BitBoard.$fOrdKings
instance GHC.Classes.Ord [BitBoard.Knights] = BitBoard.$fOrdKnights
instance GHC.Classes.Ord [BitBoard.Pawns] = BitBoard.$fOrdPawns
instance GHC.Classes.Ord [BitBoard.Queens] = BitBoard.$fOrdQueens
instance GHC.Classes.Ord [BitBoard.Rooks] = BitBoard.$fOrdRooks
instance GHC.Classes.Ord [BitBoard.WhitePieces]
  = BitBoard.$fOrdWhitePieces
instance GHC.Show.Show [BitBoard.Bishops] = BitBoard.$fShowBishops
instance GHC.Show.Show [BitBoard.BitBoard]
  = BitBoard.$fShowBitBoard
instance GHC.Show.Show [BitBoard.BlackPieces]
  = BitBoard.$fShowBlackPieces
instance GHC.Show.Show [BitBoard.Kings] = BitBoard.$fShowKings
instance GHC.Show.Show [BitBoard.Knights] = BitBoard.$fShowKnights
instance GHC.Show.Show [BitBoard.Pawns] = BitBoard.$fShowPawns
instance GHC.Show.Show [BitBoard.Queens] = BitBoard.$fShowQueens
instance GHC.Show.Show [BitBoard.Rooks] = BitBoard.$fShowRooks
instance GHC.Show.Show [BitBoard.WhitePieces]
  = BitBoard.$fShowWhitePieces
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

