
==================== FINAL INTERFACE ====================
2015-12-13 01:28:27.107291 UTC

interface hches_DCOOKx5aUDOAR8ciXX95kw:Board 7102
  interface hash: 9c6482f651dbd85a137af592f4564cba
  ABI hash: 97fbdfc85727bac4b1b597f6c6289a32
  export-list hash: 3d7f70012ff23dff8c8c460ebe35f709
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fa9503a4b03c265efc8b5152b175dd63
  sig of: Nothing
  used TH splices: False
  where
exports:
  Board.allPieceTypes
  Board.bishop
  Board.flattenFileRank
  Board.king
  Board.knight
  Board.parsePiece
  Board.parsePieceType
  Board.pawn
  Board.pieceChar
  Board.queen
  Board.rook
  Board.showBoard
  Board.startingBoard
  Board.Board
  Board.Color
  Board.Piece{Board.Piece}
  Board.PieceType{Board.PieceType}
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      attoparsec-0.13.0.1@attop_969x13NRo2w1GLFNqu19TU* base-4.8.1.0*
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN*
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy integer-gmp-1.0.0.0
                      primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb
                      scientific-0.3.4.2@scien_1UL7hJs0dy8BYuo3rFsz84
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      vector-0.11.0.0@vecto_A9qWf1eecPQGJD12EBZIxF
orphans: attoparsec-0.13.0.1@attop_969x13NRo2w1GLFNqu19TU:Data.Attoparsec.Text.Internal
         base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_A9qWf1eecPQGJD12EBZIxF:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.0.1@attop_969x13NRo2w1GLFNqu19TU:Data.Attoparsec.Internal.Types
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb:Control.Monad.Primitive
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         vector-0.11.0.0@vecto_A9qWf1eecPQGJD12EBZIxF:Data.Vector
import  -/  attoparsec-0.13.0.1@attop_969x13NRo2w1GLFNqu19TU:Data.Attoparsec.Text 225d9af7d333b3ac5c623a1bf69a4300
import  -/  attoparsec-0.13.0.1@attop_969x13NRo2w1GLFNqu19TU:Data.Attoparsec.Text.Internal 924a08f6a1fc8ebc1a3d2ff041a48ee8
import  -/  base-4.8.1.0:Control.Applicative a283901553892ce761385d18e455c2ce
import  -/  base-4.8.1.0:Data.Char ba93ec4ca3776f6d9a8c8a6223b2fb26
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:GHC.Unicode bed09d5db094d4196c8520e6b25efaa4
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base 41288a612f7bbd399bc0bb07f2f75738
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Strict 75157829e2fd1bf3aaf8a4fd3bd7d8f4
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
9ca02e3625982d2cd041d82cee286e37
  $fEqPiece :: GHC.Classes.Eq Board.Piece
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Piece Board.$fEqPiece_$c== Board.$fEqPiece_$c/= -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fEqPieceType :: GHC.Classes.Eq Board.PieceType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.PieceType
                  Board.$fEqPieceType_$c==
                  Board.$fEqPieceType_$c/= -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fEqPieceType_$c/= ::
    Board.PieceType -> Board.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.PieceType b :: Board.PieceType ->
                 case a of wild { Board.PieceType dt ->
                 case b of wild1 { Board.PieceType dt1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# dt dt1) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fEqPieceType_$c== ::
    Board.PieceType -> Board.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Board.PieceType ds1 :: Board.PieceType ->
                 case ds of wild { Board.PieceType dt ->
                 case ds1 of wild1 { Board.PieceType dt1 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fEqPiece_$c/= :: Board.Piece -> Board.Piece -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Board.Piece w1 :: Board.Piece ->
                 case w of ww { Board.Piece ww1 ww2 ->
                 case w1 of ww3 { Board.Piece ww4 ww5 ->
                 case ww1 of wild {
                   GHC.Types.False
                   -> case ww4 of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 ww5) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True
                   -> case ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# ww2 ww5) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fEqPiece_$c== :: Board.Piece -> Board.Piece -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Board.Piece ds1 :: Board.Piece ->
                 case ds of wild { Board.Piece a1 dt ->
                 case ds1 of wild1 { Board.Piece b1 dt1 ->
                 case a1 of wild2 {
                   GHC.Types.False
                   -> case b1 of wild3 {
                        GHC.Types.False
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1)
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True
                   -> case b1 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# dt dt1) } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fOrdPiece :: GHC.Classes.Ord Board.Piece
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Piece
                  Board.$fEqPiece
                  Board.$fOrdPiece_$ccompare
                  Board.$fOrdPiece_$c<
                  Board.$fOrdPiece_$c<=
                  Board.$fOrdPiece_$c>
                  Board.$fOrdPiece_$c>=
                  Board.$fOrdPiece_$cmax
                  Board.$fOrdPiece_$cmin -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fOrdPieceType :: GHC.Classes.Ord Board.PieceType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.PieceType
                  Board.$fEqPieceType
                  Board.$fOrdPieceType_$ccompare
                  Board.$fOrdPieceType_$c<
                  Board.$fOrdPieceType_$c<=
                  Board.$fOrdPieceType_$c>
                  Board.$fOrdPieceType_$c>=
                  Board.$fOrdPieceType_$cmax
                  Board.$fOrdPieceType_$cmin -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fOrdPieceType_$c< ::
    Board.PieceType -> Board.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.PieceType b :: Board.PieceType ->
                 case a of wild { Board.PieceType dt ->
                 case b of wild1 { Board.PieceType dt1 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# dt dt1) } }) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fOrdPieceType_$c<= ::
    Board.PieceType -> Board.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.PieceType b :: Board.PieceType ->
                 case a of wild { Board.PieceType dt ->
                 case b of wild1 { Board.PieceType dt1 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# dt dt1) } }) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fOrdPieceType_$c> ::
    Board.PieceType -> Board.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.PieceType b :: Board.PieceType ->
                 case a of wild { Board.PieceType dt ->
                 case b of wild1 { Board.PieceType dt1 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># dt dt1) } }) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fOrdPieceType_$c>= ::
    Board.PieceType -> Board.PieceType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.PieceType b :: Board.PieceType ->
                 case a of wild { Board.PieceType dt ->
                 case b of wild1 { Board.PieceType dt1 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# dt dt1) } }) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fOrdPieceType_$ccompare ::
    Board.PieceType -> Board.PieceType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.PieceType b :: Board.PieceType ->
                 case a of wild { Board.PieceType dt ->
                 case b of wild1 { Board.PieceType dt1 ->
                 GHC.Classes.compareInt# dt dt1 } }) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fOrdPieceType_$cmax ::
    Board.PieceType -> Board.PieceType -> Board.PieceType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ x1 :: Board.PieceType y :: Board.PieceType ->
                 case x1 of wild { Board.PieceType dt ->
                 case y of wild1 { Board.PieceType dt1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt dt1) of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fOrdPieceType_$cmin ::
    Board.PieceType -> Board.PieceType -> Board.PieceType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ x1 :: Board.PieceType y :: Board.PieceType ->
                 case x1 of wild { Board.PieceType dt ->
                 case y of wild1 { Board.PieceType dt1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt dt1) of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fOrdPiece_$c< :: Board.Piece -> Board.Piece -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.Piece b :: Board.Piece ->
                 case a of wild { Board.Piece a1 dt ->
                 case b of wild1 { Board.Piece b1 dt1 ->
                 case a1 of wild2 {
                   GHC.Types.False
                   -> case b1 of wild3 {
                        GHC.Types.False
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# dt dt1)
                        GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True
                   -> case b1 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# dt dt1) } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fOrdPiece_$c<= :: Board.Piece -> Board.Piece -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.Piece b :: Board.Piece ->
                 case a of wild { Board.Piece a1 dt ->
                 case b of wild1 { Board.Piece b1 dt1 ->
                 case a1 of wild2 {
                   GHC.Types.False
                   -> case b1 of wild3 {
                        GHC.Types.False
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# dt dt1)
                        GHC.Types.True -> GHC.Types.True }
                   GHC.Types.True
                   -> case b1 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# dt dt1) } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fOrdPiece_$c> :: Board.Piece -> Board.Piece -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.Piece b :: Board.Piece ->
                 case a of wild { Board.Piece a1 dt ->
                 case b of wild1 { Board.Piece b1 dt1 ->
                 case a1 of wild2 {
                   GHC.Types.False
                   -> case b1 of wild3 {
                        GHC.Types.False
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># dt dt1)
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True
                   -> case b1 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.># dt dt1) } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fOrdPiece_$c>= :: Board.Piece -> Board.Piece -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Board.Piece b :: Board.Piece ->
                 case a of wild { Board.Piece a1 dt ->
                 case b of wild1 { Board.Piece b1 dt1 ->
                 case a1 of wild2 {
                   GHC.Types.False
                   -> case b1 of wild3 {
                        GHC.Types.False
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# dt dt1)
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True
                   -> case b1 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# dt dt1) } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fOrdPiece_$ccompare ::
    Board.Piece -> Board.Piece -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Board.Piece w1 :: Board.Piece ->
                 case w of ww { Board.Piece ww1 ww2 ->
                 case w1 of ww3 { Board.Piece ww4 ww5 ->
                 case ww1 of wild {
                   GHC.Types.False
                   -> case ww4 of wild1 {
                        GHC.Types.False -> GHC.Classes.compareInt# ww2 ww5
                        GHC.Types.True -> GHC.Types.LT }
                   GHC.Types.True
                   -> case ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True -> GHC.Classes.compareInt# ww2 ww5 } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fOrdPiece_$cmax :: Board.Piece -> Board.Piece -> Board.Piece
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Board.Piece w1 :: Board.Piece ->
                 case w of ww { Board.Piece ww1 ww2 ->
                 case w1 of ww3 { Board.Piece ww4 ww5 ->
                 case ww1 of wild {
                   GHC.Types.False
                   -> case ww4 of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww2 ww5) of wild2 {
                             GHC.Types.False -> Board.Piece GHC.Types.False ww2
                             GHC.Types.True -> Board.Piece GHC.Types.False ww5 }
                        GHC.Types.True -> Board.Piece GHC.Types.True ww5 }
                   GHC.Types.True
                   -> case ww4 of wild1 {
                        GHC.Types.False -> Board.Piece GHC.Types.True ww2
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww2 ww5) of wild2 {
                             GHC.Types.False -> Board.Piece GHC.Types.True ww2
                             GHC.Types.True -> Board.Piece GHC.Types.True ww5 } } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fOrdPiece_$cmin :: Board.Piece -> Board.Piece -> Board.Piece
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Board.Piece w1 :: Board.Piece ->
                 case w of ww { Board.Piece ww1 ww2 ->
                 case w1 of ww3 { Board.Piece ww4 ww5 ->
                 case ww1 of wild {
                   GHC.Types.False
                   -> case ww4 of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww2 ww5) of wild2 {
                             GHC.Types.False -> Board.Piece GHC.Types.False ww5
                             GHC.Types.True -> Board.Piece GHC.Types.False ww2 }
                        GHC.Types.True -> Board.Piece GHC.Types.False ww2 }
                   GHC.Types.True
                   -> case ww4 of wild1 {
                        GHC.Types.False -> Board.Piece GHC.Types.False ww5
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww2 ww5) of wild2 {
                             GHC.Types.False -> Board.Piece GHC.Types.True ww5
                             GHC.Types.True -> Board.Piece GHC.Types.True ww2 } } } } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fShowPiece :: GHC.Show.Show Board.Piece
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Piece
                  Board.$fShowPiece_$cshowsPrec
                  Board.$fShowPiece_$cshow
                  Board.$fShowPiece_$cshowList -}
9ca02e3625982d2cd041d82cee286e37
  $fShowPiece1 :: Board.Piece -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Board.Piece w1 :: GHC.Base.String ->
                 case w of ww { Board.Piece ww1 ww2 ->
                 Board.$w$cshowsPrec 0 ww1 ww2 w1 }) -}
08dd8acc25cbec65cb533b3e8c414834
  $fShowPiece2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PieceType "#) -}
a84128c621e33d3ed2867b2470c0eb5c
  $fShowPiece3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Piece "#) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fShowPieceType :: GHC.Show.Show Board.PieceType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.PieceType
                  Board.$fShowPieceType_$cshowsPrec
                  Board.$fShowPieceType_$cshow
                  Board.$fShowPieceType_$cshowList -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fShowPieceType1 :: Board.PieceType -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Board.PieceType w1 :: GHC.Base.String ->
                 case w of ww { Board.PieceType ww1 ->
                 Board.$w$cshowsPrec1 0 ww1 w1 }) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fShowPieceType_$cshow :: Board.PieceType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Board.PieceType ->
                 Board.$fShowPieceType_$cshowsPrec
                   GHC.Show.shows18
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fShowPieceType_$cshowList :: [Board.PieceType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.PieceType
                   Board.$fShowPieceType1) -}
8a2b384430d0ca0f7a2382b565ae9cc4
  $fShowPieceType_$cshowsPrec ::
    GHC.Types.Int -> Board.PieceType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Board.PieceType
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Board.PieceType ww3 ->
                 Board.$w$cshowsPrec1 ww1 ww3 w2 } }) -}
9ca02e3625982d2cd041d82cee286e37
  $fShowPiece_$cshow :: Board.Piece -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Board.Piece ->
                 Board.$fShowPiece_$cshowsPrec
                   GHC.Show.shows18
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9ca02e3625982d2cd041d82cee286e37
  $fShowPiece_$cshowList :: [Board.Piece] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.Piece
                   Board.$fShowPiece1) -}
9ca02e3625982d2cd041d82cee286e37
  $fShowPiece_$cshowsPrec ::
    GHC.Types.Int -> Board.Piece -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S(SL),1*U(U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.Piece w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Board.Piece ww3 ww4 ->
                 Board.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
f8c47ec0531d77c45bc922eacd61b9d1
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Board.Color
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Board.Color
                   ww2 :: GHC.Prim.Int#
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowPiece3
                       (case ww1 of wild {
                          GHC.Types.False
                          -> GHC.Base.++
                               @ GHC.Types.Char
                               GHC.Show.shows17
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (Board.$w$cshowsPrec1 11 ww2 x1))
                          GHC.Types.True
                          -> GHC.Base.++
                               @ GHC.Types.Char
                               GHC.Show.shows16
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (Board.$w$cshowsPrec1 11 ww2 x1)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
6285f875bd5b90e45f0242936df37790
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Board.$fShowPiece2
                        (case GHC.Show.$wshowSignedInt 11 ww1 w of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Board.$fShowPiece2
                           (case GHC.Show.$wshowSignedInt
                                   11
                                   ww1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows8
                                      w) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 })) }) -}
02e7d5463422cd521a33e9fa4f718baf
  $wa ::
    Board.Color
    -> forall r.
       Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
       -> GHC.Prim.Int#
       -> Data.Attoparsec.Internal.Types.More
       -> Data.Attoparsec.Internal.Types.Failure
            Data.Text.Internal.Text
            (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
            r
       -> Data.Attoparsec.Internal.Types.Success
            Data.Text.Internal.Text
            (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
            Board.Piece
            r
       -> Data.Attoparsec.Internal.Types.IResult Data.Text.Internal.Text r
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U,U,U,U)><L,U><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: [0],
     Unfolding: (\ w :: Board.Color
                   @ r
                   w1 :: Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
                   ww :: GHC.Prim.Int#
                   w2 :: Data.Attoparsec.Internal.Types.More
                   w3 :: Data.Attoparsec.Internal.Types.Failure
                           Data.Text.Internal.Text
                           (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                           r
                   w4 :: Data.Attoparsec.Internal.Types.Success
                           Data.Text.Internal.Text
                           (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                           Board.Piece
                           r ->
                 let {
                   succ :: Data.Attoparsec.Internal.Types.Success
                             Data.Text.Internal.Text
                             (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                             Board.PieceType
                             r
                     {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>,
                        Unfolding: InlineRule (4, True, False)
                                   (\ t' :: Data.Attoparsec.Internal.Types.State
                                              Data.Text.Internal.Text
                                      pos' :: Data.Attoparsec.Internal.Types.Pos
                                      more' :: Data.Attoparsec.Internal.Types.More
                                      a11 :: Board.PieceType ->
                                    w4 t' pos' more' (Board.$WPiece w a11)) -}
                   = \ t' :: Data.Attoparsec.Internal.Types.State
                               Data.Text.Internal.Text
                       pos' :: Data.Attoparsec.Internal.Types.Pos
                       more' :: Data.Attoparsec.Internal.Types.More
                       a11 :: Board.PieceType ->
                     w4 t' pos' more' (Board.$WPiece w a11)
                 } in
                 let {
                   a :: GHC.Types.Int = GHC.Types.I# ww
                 } in
                 Board.$wa1
                   @ r
                   w1
                   ww
                   w2
                   (\ t' :: Data.Attoparsec.Internal.Types.State
                              Data.Text.Internal.Text
                      _pos' :: Data.Attoparsec.Internal.Types.Pos[OneShot]
                      more' :: Data.Attoparsec.Internal.Types.More[OneShot]
                      _ctx :: [GHC.Base.String][OneShot]
                      _msg :: GHC.Base.String[OneShot] ->
                    (Data.Attoparsec.Internal.Types.$w$cpure
                       @ Data.Text.Internal.Text
                       GHC.Prim.void#
                       @ Board.PieceType
                       Board.pawn)
                      `cast`
                    (Data.Attoparsec.Internal.Types.NTCo:Parser[0]
                         <Data.Text.Internal.Text>_N <Board.PieceType>_R)
                      @ r
                      t'
                      a `cast` (Sym (Data.Attoparsec.Internal.Types.NTCo:Pos[0]))
                      more'
                      w3
                      succ)
                   (\ t' :: Data.Attoparsec.Internal.Types.State
                              Data.Text.Internal.Text
                      pos' :: Data.Attoparsec.Internal.Types.Pos[OneShot]
                      more' :: Data.Attoparsec.Internal.Types.More[OneShot]
                      a11 :: GHC.Types.Char[OneShot] ->
                    w4
                      t'
                      pos'
                      more'
                      (case w of dt { DEFAULT ->
                       case a11 of wild { GHC.Types.C# c1 ->
                       case c1 of wild1 {
                         DEFAULT
                         -> case Board.king of dt1 { Board.PieceType dt2 ->
                            Board.Piece dt dt2 }
                         'B'
                         -> case Board.bishop of dt1 { Board.PieceType dt2 ->
                            Board.Piece dt dt2 }
                         'N'
                         -> case Board.knight of dt1 { Board.PieceType dt2 ->
                            Board.Piece dt dt2 }
                         'Q'
                         -> case Board.queen of dt1 { Board.PieceType dt2 ->
                            Board.Piece dt dt2 }
                         'R'
                         -> case Board.rook of dt1 { Board.PieceType dt2 ->
                            Board.Piece dt dt2 } } } }))) -}
c61889d05be753c284e0a460c45e5136
  $wa1 ::
    Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.Text.Internal.Text
         (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.Text.Internal.Text
         (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
         GHC.Types.Char
         r
    -> Data.Attoparsec.Internal.Types.IResult Data.Text.Internal.Text r
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U)><L,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(U))))>,
     Inline: [0] -}
7e74df36b88174f64b4665f26b86536d
  $wa2 ::
    Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
    -> GHC.Prim.Int#
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.Text.Internal.Text
         (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.Text.Internal.Text
         (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
         Board.PieceType
         r
    -> Data.Attoparsec.Internal.Types.IResult Data.Text.Internal.Text r
  {- Arity: 5, Strictness: <L,U(U,U,U,U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ r
                   w :: Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
                   ww :: GHC.Prim.Int#
                   w1 :: Data.Attoparsec.Internal.Types.More
                   w2 :: Data.Attoparsec.Internal.Types.Failure
                           Data.Text.Internal.Text
                           (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                           r
                   w3 :: Data.Attoparsec.Internal.Types.Success
                           Data.Text.Internal.Text
                           (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                           Board.PieceType
                           r ->
                 let {
                   a :: GHC.Types.Int = GHC.Types.I# ww
                 } in
                 Board.$wa1
                   @ r
                   w
                   ww
                   w1
                   (\ t' :: Data.Attoparsec.Internal.Types.State
                              Data.Text.Internal.Text
                      _pos' :: Data.Attoparsec.Internal.Types.Pos[OneShot]
                      more' :: Data.Attoparsec.Internal.Types.More[OneShot]
                      _ctx :: [GHC.Base.String][OneShot]
                      _msg :: GHC.Base.String[OneShot] ->
                    (Data.Attoparsec.Internal.Types.$w$cpure
                       @ Data.Text.Internal.Text
                       GHC.Prim.void#
                       @ Board.PieceType
                       Board.pawn)
                      `cast`
                    (Data.Attoparsec.Internal.Types.NTCo:Parser[0]
                         <Data.Text.Internal.Text>_N <Board.PieceType>_R)
                      @ r
                      t'
                      a `cast` (Sym (Data.Attoparsec.Internal.Types.NTCo:Pos[0]))
                      more'
                      w2
                      w3)
                   (\ t' :: Data.Attoparsec.Internal.Types.State
                              Data.Text.Internal.Text
                      pos' :: Data.Attoparsec.Internal.Types.Pos[OneShot]
                      more' :: Data.Attoparsec.Internal.Types.More[OneShot]
                      a11 :: GHC.Types.Char[OneShot] ->
                    w3
                      t'
                      pos'
                      more'
                      (case a11 of wild { GHC.Types.C# c1 ->
                       case c1 of wild1 {
                         DEFAULT -> Board.king
                         'B' -> Board.bishop
                         'N' -> Board.knight
                         'Q' -> Board.queen
                         'R' -> Board.rook } }))) -}
de7ce80e69ffee23d686409bcd713ab3
  $wgo :: GHC.Prim.Int# -> (# Board.PieceType, [Board.PieceType] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0] -}
be3aeb83b333ad634e543d773e4dc76c
  $wpieceChar :: Board.Color -> GHC.Prim.Int# -> GHC.Prim.Char#
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: INLINABLE[0],
     Unfolding: <stable> (\ ww :: Board.Color ww1 :: GHC.Prim.Int# ->
                          let {
                            letter :: GHC.Types.Char
                            = case Board.pawn of wild { Board.PieceType dt ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.==# ww1 dt) of wild1 {
                                GHC.Types.False
                                -> case Board.rook of wild2 { Board.PieceType dt1 ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.==# ww1 dt1) of wild3 {
                                     GHC.Types.False
                                     -> case Board.knight of wild4 { Board.PieceType dt2 ->
                                        case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==# ww1 dt2) of wild5 {
                                          GHC.Types.False
                                          -> case Board.bishop of wild6 { Board.PieceType dt3 ->
                                             case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.==# ww1 dt3) of wild7 {
                                               GHC.Types.False
                                               -> case Board.queen of wild8 { Board.PieceType dt4 ->
                                                  case GHC.Prim.tagToEnum#
                                                         @ GHC.Types.Bool
                                                         (GHC.Prim.==# ww1 dt4) of wild9 {
                                                    GHC.Types.False -> GHC.Types.C# 'k'
                                                    GHC.Types.True -> GHC.Types.C# 'q' } }
                                               GHC.Types.True -> GHC.Types.C# 'b' } }
                                          GHC.Types.True -> GHC.Types.C# 'n' } }
                                     GHC.Types.True -> GHC.Types.C# 'r' } }
                                GHC.Types.True -> GHC.Types.C# 'p' } }
                          } in
                          case ww of wild {
                            GHC.Types.False -> case letter of ww2 { GHC.Types.C# ww3 -> ww3 }
                            GHC.Types.True
                            -> case letter of ww2 { GHC.Types.C# ww3 ->
                               case {__pkg_ccall base-4.8.1.0 u_towupper GHC.Prim.Int#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                      (GHC.Prim.ord# ww3)
                                      GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord#
                                         (GHC.Prim.int2Word# ds1)
                                         __word 1114111) of wild2 {
                                 GHC.Types.False
                                 -> case GHC.Char.chr2 ds1 ret_ty GHC.Prim.Char# of {}
                                 GHC.Types.True -> GHC.Prim.chr# ds1 } } } }) -}
23a5f097f8341f48290bdf0337ecf484
  type Board = Data.IntMap.Base.IntMap Board.Piece
94465145731abeb83fb90abca9de01d1
  type Color = GHC.Types.Bool
9ca02e3625982d2cd041d82cee286e37
  data Piece = Piece !Board.Color {-# UNPACK #-}Board.PieceType
8a2b384430d0ca0f7a2382b565ae9cc4
  data PieceType = PieceType {-# UNPACK #-}GHC.Types.Int
ea06878fd410084cdfb284a9148c2c30
  allPieceTypes :: [Board.PieceType]
  {- Unfolding: (case Board.allPieceTypes1 of ds { (,,,,,,) allPieceTypes3 pawn1 rook1 knight1 bishop1 queen1 king1 ->
                 allPieceTypes3 }) -}
81dfdc044384aba278eb36d961824e39
  allPieceTypes1 ::
    ([Board.PieceType],
     Board.PieceType,
     Board.PieceType,
     Board.PieceType,
     Board.PieceType,
     Board.PieceType,
     Board.PieceType)
  {- Unfolding: (case Board.$wgo 1 of ww { (#,#) ww1 ww2 ->
                 case ww2 of wild {
                   [] -> Board.allPieceTypes2 GHC.Prim.void#
                   : rook1 ds
                   -> case ds of wild1 {
                        [] -> Board.allPieceTypes2 GHC.Prim.void#
                        : knight1 ds1
                        -> case ds1 of wild2 {
                             [] -> Board.allPieceTypes2 GHC.Prim.void#
                             : bishop1 ds2
                             -> case ds2 of wild3 {
                                  [] -> Board.allPieceTypes2 GHC.Prim.void#
                                  : queen1 ds3
                                  -> case ds3 of wild4 {
                                       [] -> Board.allPieceTypes2 GHC.Prim.void#
                                       : king1 ds4
                                       -> case ds4 of wild5 {
                                            []
                                            -> (GHC.Types.: @ Board.PieceType ww1 wild,
                                                ww1,
                                                rook1,
                                                knight1,
                                                bishop1,
                                                queen1,
                                                king1)
                                            : ipv ipv1
                                            -> Board.allPieceTypes2 GHC.Prim.void# } } } } } } }) -}
eb16d9ae126b1a3af4a400a20e47b6b6
  allPieceTypes2 ::
    GHC.Prim.Void#
    -> ([Board.PieceType],
        Board.PieceType,
        Board.PieceType,
        Board.PieceType,
        Board.PieceType,
        Board.PieceType,
        Board.PieceType)
  {- Arity: 1, Strictness: <B,A>b -}
e3f6ebd55dba269e125558d3e9962633
  bishop :: Board.PieceType
  {- Unfolding: (case Board.allPieceTypes1 of ds { (,,,,,,) allPieceTypes3 pawn1 rook1 knight1 bishop1 queen1 king1 ->
                 bishop1 }) -}
6144378369830db178b9514d0dd65bdc
  flattenFileRank :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ file :: GHC.Types.Int rank :: GHC.Types.Int ->
                 case file of file1 { GHC.Types.I# ipv ->
                 case rank of rank1 { GHC.Types.I# ipv1 ->
                 GHC.Num.$fNumInt_$c+
                   (GHC.Num.$fNumInt_$c*
                      (GHC.Types.I# 8)
                      (GHC.Num.$fNumInt_$c- rank1 (GHC.Types.I# 1)))
                   file1 } }) -}
02587867f099c05bf336fa1497562ac1
  king :: Board.PieceType
  {- Unfolding: (case Board.allPieceTypes1 of ds { (,,,,,,) allPieceTypes3 pawn1 rook1 knight1 bishop1 queen1 king1 ->
                 king1 }) -}
152506c81403bfcaabb1696223090124
  knight :: Board.PieceType
  {- Unfolding: (case Board.allPieceTypes1 of ds { (,,,,,,) allPieceTypes3 pawn1 rook1 knight1 bishop1 queen1 king1 ->
                 knight1 }) -}
2e4593b93ce30f7d4cb0853aa0b4b852
  parsePiece ::
    Board.Color -> Data.Attoparsec.Text.Internal.Parser Board.Piece
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U,U,U,U)><S,U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Unfolding: InlineRule (0, True, True)
                Board.parsePiece1
                  `cast`
                (<Board.Color>_R
                 ->_R Sym (Data.Attoparsec.Internal.Types.NTCo:Parser[0]
                               <Data.Text.Internal.Text>_N <Board.Piece>_R)) -}
3a956016fdd6142b0e95b961733cef69
  parsePiece1 ::
    Board.Color
    -> forall r.
       Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
       -> Data.Attoparsec.Internal.Types.Pos
       -> Data.Attoparsec.Internal.Types.More
       -> Data.Attoparsec.Internal.Types.Failure
            Data.Text.Internal.Text
            (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
            r
       -> Data.Attoparsec.Internal.Types.Success
            Data.Text.Internal.Text
            (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
            Board.Piece
            r
       -> Data.Attoparsec.Internal.Types.IResult Data.Text.Internal.Text r
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U,U,U,U)><S,U(U)><L,U><L,U><L,C(C1(C1(C1(U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Board.Color
                   @ r
                   w1 :: Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
                   w2 :: Data.Attoparsec.Internal.Types.Pos
                   w3 :: Data.Attoparsec.Internal.Types.More
                   w4 :: Data.Attoparsec.Internal.Types.Failure
                           Data.Text.Internal.Text
                           (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                           r
                   w5 :: Data.Attoparsec.Internal.Types.Success
                           Data.Text.Internal.Text
                           (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                           Board.Piece
                           r ->
                 case w2
                        `cast`
                      (Data.Attoparsec.Internal.Types.NTCo:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Board.$wa w @ r w1 ww1 w3 w4 w5 }) -}
1d9a4e766bc5d60449fc5c494028a368
  parsePieceType ::
    Data.Attoparsec.Text.Internal.Parser Board.PieceType
  {- Arity: 5, Strictness: <L,U(U,U,U,U,U)><S,U(U)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Board.parsePieceType1
                  `cast`
                (Sym (Data.Attoparsec.Internal.Types.NTCo:Parser[0]
                          <Data.Text.Internal.Text>_N <Board.PieceType>_R)) -}
f93b9092eaef8ed22eb0f55f04af8b2f
  parsePieceType1 ::
    Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
    -> Data.Attoparsec.Internal.Types.Pos
    -> Data.Attoparsec.Internal.Types.More
    -> Data.Attoparsec.Internal.Types.Failure
         Data.Text.Internal.Text
         (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
         r
    -> Data.Attoparsec.Internal.Types.Success
         Data.Text.Internal.Text
         (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
         Board.PieceType
         r
    -> Data.Attoparsec.Internal.Types.IResult Data.Text.Internal.Text r
  {- Arity: 5, Strictness: <L,U(U,U,U,U,U)><S,U(U)><L,U><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ r
                   w :: Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text
                   w1 :: Data.Attoparsec.Internal.Types.Pos
                   w2 :: Data.Attoparsec.Internal.Types.More
                   w3 :: Data.Attoparsec.Internal.Types.Failure
                           Data.Text.Internal.Text
                           (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                           r
                   w4 :: Data.Attoparsec.Internal.Types.Success
                           Data.Text.Internal.Text
                           (Data.Attoparsec.Internal.Types.State Data.Text.Internal.Text)
                           Board.PieceType
                           r ->
                 case w1
                        `cast`
                      (Data.Attoparsec.Internal.Types.NTCo:Pos[0]) of ww { GHC.Types.I# ww1 ->
                 Board.$wa2 @ r w ww1 w2 w3 w4 }) -}
584f4eabdac1efb755abc0d5e7d2d160
  pawn :: Board.PieceType
  {- Unfolding: (case Board.allPieceTypes1 of ds { (,,,,,,) allPieceTypes3 pawn1 rook1 knight1 bishop1 queen1 king1 ->
                 pawn1 }) -}
435a4b92f19a71c8507971bc508534ad
  pieceChar :: Board.Piece -> GHC.Types.Char
  {- Arity: 1, Strictness: <S(SL),1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Board.Piece ->
                 case w of ww { Board.Piece ww1 ww2 ->
                 case Board.$wpieceChar ww1 ww2 of ww3 { DEFAULT ->
                 GHC.Types.C# ww3 } }) -}
5b0faa04edb6812e00a097773b0e2c6f
  queen :: Board.PieceType
  {- Unfolding: (case Board.allPieceTypes1 of ds { (,,,,,,) allPieceTypes3 pawn1 rook1 knight1 bishop1 queen1 king1 ->
                 queen1 }) -}
0adeb5130ae4ad5dd62bb555caecb010
  rook :: Board.PieceType
  {- Unfolding: (case Board.allPieceTypes1 of ds { (,,,,,,) allPieceTypes3 pawn1 rook1 knight1 bishop1 queen1 king1 ->
                 rook1 }) -}
8faf2d745bcac29e2ec827611fbd322c
  showBoard :: Board.Board -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ board :: Board.Board ->
                 GHC.CString.unpackAppendCString#
                   "*--------*\n"#
                   (case Data.IntMap.Base.union1
                           @ GHC.Types.Char
                           (Data.IntMap.Strict.map
                              @ Board.Piece
                              @ GHC.Types.Char
                              Board.pieceChar
                              board)
                           Board.showBoard2 of wild {
                      DEFAULT
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Board.showBoard_go
                              (GHC.List.reverse1
                                 @ [GHC.Types.Char]
                                 (Board.showBoard_cutEvery8
                                    (Board.showBoard_go2 (GHC.Types.[] @ GHC.Types.Char) wild))
                                 (GHC.Types.[] @ [GHC.Types.Char])))
                           Board.showBoard1
                      Data.IntMap.Base.Bin dt dt1 l r
                      -> case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<# dt1 0) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Board.showBoard_go
                                   (GHC.List.reverse1
                                      @ [GHC.Types.Char]
                                      (Board.showBoard_cutEvery8
                                         (Board.showBoard_go2
                                            (Board.showBoard_go2 (GHC.Types.[] @ GHC.Types.Char) r)
                                            l))
                                      (GHC.Types.[] @ [GHC.Types.Char])))
                                Board.showBoard1
                           GHC.Types.True
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Board.showBoard_go
                                   (GHC.List.reverse1
                                      @ [GHC.Types.Char]
                                      (Board.showBoard_cutEvery8
                                         (Board.showBoard_go2
                                            (Board.showBoard_go2 (GHC.Types.[] @ GHC.Types.Char) l)
                                            r))
                                      (GHC.Types.[] @ [GHC.Types.Char])))
                                Board.showBoard1 } })) -}
0d5b12b481109b78441dbb2f66946d75
  showBoard1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*--------*\n"#) -}
07988574ce05a919b360c62a7ebc1c37
  showBoard2 :: Data.IntMap.Base.IntMap GHC.Types.Char
  {- Unfolding: (case Board.showBoard_go1
                        1
                        Board.showBoard_xs of wild {
                   [] -> Data.IntMap.Base.Nil @ GHC.Types.Char
                   : z0 zs0
                   -> case z0 of ww { (,) ww1 ww2 ->
                      case ww1 of ww3 { GHC.Types.I# ww4 ->
                      Data.IntMap.Strict.$wwork
                        @ GHC.Types.Char
                        ww4
                        ww2
                        zs0
                        (Data.IntMap.Strict.Nada @ GHC.Types.Char) } } }) -}
0a91ebb2300ac5414db351ce61ffe2c8
  showBoard_cutEvery8 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1ed4f7a9657bf0d9d4e2e7340c764faa
  showBoard_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c45966567c11817787ef51a566a02f46
  showBoard_go1 ::
    GHC.Prim.Int#
    -> [GHC.Types.Char] -> [(GHC.Types.Int, GHC.Types.Char)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
11c1e15f4e5ab6cfeefcdb302c92e2d0
  showBoard_go2 ::
    [GHC.Types.Char]
    -> Data.IntMap.Base.IntMap GHC.Types.Char -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
e6651b826f313f8e90828237ca4afa83
  showBoard_xs :: [GHC.Types.Char]
  {- HasNoCafRefs -}
dfd5dad06d5f99aeb342c3f7cbfcb4ea
  startingBoard :: Board.Board
  {- Unfolding: (case GHC.Base.++
                        @ (GHC.Types.Int, Board.Piece)
                        Board.startingBoard18
                        Board.startingBoard1 of wild {
                   [] -> Data.IntMap.Base.Nil @ Board.Piece
                   : z0 zs0
                   -> case z0 of ww { (,) ww1 ww2 ->
                      case ww1 of ww3 { GHC.Types.I# ww4 ->
                      Data.IntMap.Strict.$wwork
                        @ Board.Piece
                        ww4
                        ww2
                        zs0
                        (Data.IntMap.Strict.Nada @ Board.Piece) } } }) -}
042558013f0d136d068570ee390f929b
  startingBoard1 :: [(GHC.Types.Int, Board.Piece)]
  {- Unfolding: (GHC.Base.++
                   @ (GHC.Types.Int, Board.Piece)
                   Board.startingBoard16
                   Board.startingBoard2) -}
385e8108583b35d5869236b616f98a32
  startingBoard10 :: [Board.PieceType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Board.PieceType
                   Board.king
                   Board.startingBoard11) -}
eeabbb06d775d62ca37dc2e8287b33af
  startingBoard11 :: [Board.PieceType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Board.PieceType
                   Board.bishop
                   Board.startingBoard12) -}
f5abda2f72047e737147496c00f40ad5
  startingBoard12 :: [Board.PieceType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Board.PieceType
                   Board.knight
                   Board.startingBoard13) -}
890381344885287413da55aba1cc2840
  startingBoard13 :: [Board.PieceType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Board.PieceType
                   Board.rook
                   (GHC.Types.[] @ Board.PieceType)) -}
8fe0668ffc5111a585d96cf73b4fd2bf
  startingBoard14 :: [(GHC.Types.Int, Board.Piece)]
  {- Unfolding: (Board.startingBoard_pawnLine
                   GHC.Types.False
                   Board.startingBoard15) -}
a86a7cf323edc0ccef95d44ae4eae50b
  startingBoard15 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 7) -}
10dd9e06ffbf0f6b4640e8e057f4b4e6
  startingBoard16 :: [(GHC.Types.Int, Board.Piece)]
  {- Unfolding: (Board.startingBoard_pawnLine
                   GHC.Types.True
                   Board.startingBoard17) -}
acfd2947252a891e004ff16351d7b959
  startingBoard17 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2) -}
f8e1570a1e359b7bd21b3389a4e638d0
  startingBoard18 :: [(GHC.Types.Int, Board.Piece)]
  {- Unfolding: (Board.startingBoard_backLine
                   GHC.Types.True
                   Board.startingBoard_n1) -}
ad2cb06e566388b02be136481d136319
  startingBoard2 :: [(GHC.Types.Int, Board.Piece)]
  {- Unfolding: (GHC.Base.++
                   @ (GHC.Types.Int, Board.Piece)
                   Board.startingBoard14
                   Board.startingBoard3) -}
20712bb582c32aadb4419206a5d15ba0
  startingBoard3 :: [(GHC.Types.Int, Board.Piece)]
  {- Unfolding: (Board.startingBoard_backLine
                   GHC.Types.False
                   Board.startingBoard4) -}
ddbb102fe6d2fe7a6a5225e362695b46
  startingBoard4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8) -}
e9da91db07616cf2a7f7c6a50aa6c160
  startingBoard5 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1 8) -}
4f77aca3358f22b10226e9c3e7641fb3
  startingBoard6 :: [Board.PieceType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Board.PieceType
                   Board.rook
                   Board.startingBoard7) -}
58e80c7e6cd0467f190114873ae57336
  startingBoard7 :: [Board.PieceType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Board.PieceType
                   Board.knight
                   Board.startingBoard8) -}
26db67a22011779c54115e460c606cab
  startingBoard8 :: [Board.PieceType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Board.PieceType
                   Board.bishop
                   Board.startingBoard9) -}
79300638a754f9ddbf30c3d162dd888f
  startingBoard9 :: [Board.PieceType]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Board.PieceType
                   Board.queen
                   Board.startingBoard10) -}
ba430097a1d762ac9ef0d75394b9c426
  startingBoard_backLine ::
    Board.Color -> GHC.Types.Int -> [(GHC.Types.Int, Board.Piece)]
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: (\ color :: Board.Color r :: GHC.Types.Int ->
                 GHC.List.zipWith
                   @ Board.PieceType
                   @ GHC.Types.Int
                   @ (GHC.Types.Int, Board.Piece)
                   (\ pt :: Board.PieceType f :: GHC.Types.Int[OneShot] ->
                    (Board.flattenFileRank f r, Board.$WPiece color pt))
                   Board.startingBoard6
                   Board.startingBoard5) -}
76d8e6696c34e4ae04b764e76f07dc44
  startingBoard_n1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
8d1a1ab7aa2caea87700b36c4ae50284
  startingBoard_pawnLine ::
    Board.Color -> GHC.Types.Int -> [(GHC.Types.Int, Board.Piece)]
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: (\ color :: Board.Color r :: GHC.Types.Int ->
                 GHC.Base.map
                   @ GHC.Types.Int
                   @ (GHC.Types.Int, Board.Piece)
                   (\ f :: GHC.Types.Int ->
                    (Board.flattenFileRank f r, Board.$WPiece color Board.pawn))
                   Board.startingBoard5) -}
instance GHC.Classes.Eq [Board.Piece] = Board.$fEqPiece
instance GHC.Classes.Eq [Board.PieceType] = Board.$fEqPieceType
instance GHC.Classes.Ord [Board.Piece] = Board.$fOrdPiece
instance GHC.Classes.Ord [Board.PieceType] = Board.$fOrdPieceType
instance GHC.Show.Show [Board.Piece] = Board.$fShowPiece
instance GHC.Show.Show [Board.PieceType] = Board.$fShowPieceType
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

