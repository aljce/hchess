
==================== FINAL INTERFACE ====================
2016-01-03 05:36:02.177726 UTC

interface hches_3PXdSEAhhp2JIrhYvA7RvZ:Board 7102
  interface hash: 17ede38469030e371ae022a331194130
  ABI hash: 39873f4ed53528af07e0b2ad9994c225
  export-list hash: 4f7b98092ef87ef50bc5f50b83e780d6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2bfdd69c509df0f94c327e5faec9ae27
  sig of: Nothing
  used TH splices: False
  where
exports:
  Board.fromFEN
  Board.startingBoard
  Board.toFEN
  Board.Board{Board.Board Board.bKing Board.bitBoard Board.castling Board.enPassant Board.fullMoveClock Board.halfMoveClock Board.turn Board.wKing}
module dependencies: BitBoard FEN Index
package dependencies: ansi-terminal-0.6.2.3@ansit_KW0LUY2zB7JCYzE4ZYrwBg
                      ansi-wl-pprint-0.6.7.3@ansiw_KPlSW7tbqXS51Lj59n3FC4
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      attoparsec-0.13.0.1@attop_FtJZAZu3GDOJSwmSRnXnPH base-4.8.1.0
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bool-extras-0.4.0@boole_GdoTyzdjqQqAeS3KnmOc2Q
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy integer-gmp-1.0.0.0
                      primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb
                      scientific-0.3.4.4@scien_03wvk1zJytY0wVzR42F1U4
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      vector-0.11.0.0@vecto_A9qWf1eecPQGJD12EBZIxF
orphans: attoparsec-0.13.0.1@attop_FtJZAZu3GDOJSwmSRnXnPH:Data.Attoparsec.ByteString.Char8
         base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.3.3@hasha_2GTZqecVp8NJZrNuKzGxfy:Data.Hashable.Generic
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_A9qWf1eecPQGJD12EBZIxF:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.0.1@attop_FtJZAZu3GDOJSwmSRnXnPH:Data.Attoparsec.Internal.Types
                         base-4.8.1.0:Control.Applicative base-4.8.1.0:Data.Either
                         base-4.8.1.0:Data.Functor.Identity base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:Data.Void
                         base-4.8.1.0:GHC.Exts base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb:Control.Monad.Primitive
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
                         vector-0.11.0.0@vecto_A9qWf1eecPQGJD12EBZIxF:Data.Vector
import  -/  base-4.8.1.0:Data.Bits 5341167fdd5958c2b3f0dac8924f1efd
import  -/  base-4.8.1.0:Data.Bool ca042538fb71252dd8e7a494efe2ad9e
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  bool-extras-0.4.0@boole_GdoTyzdjqQqAeS3KnmOc2Q:Data.Bool.Extras 1c40d801968a12a7749b9e1cb7a3e7e2
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  BitBoard 1d34c765e2913aef164a6d247daf4736
  exports: 6eb44feaf65c4fa3bf03a262b000e28d
  BitBoard 76ff291bd5559725ac43a513632ccddc
  black 93de7e4417326fde8d7fd70b0bedd77d
  kings 8a7ed4ec82aa29aa264f0efbb0962cfd
  white 96ed533a682ea2fe7c49e56ce66c33f3
import  -/  FEN faec11b9a63df206767d39b5afe70cab
  exports: 8539ee7adba37556989bad8e5d089858
  Castling 444c72f692ba7b0ccd917726e94249b7
  FEN 8ba6c9bd792e3f58f89fe51949d85c5b
  FEN 8162b3fa60f7c66ec975c2b16343a921
  FullMoveClock 61a44c5c2c42e0be2cfd0cc2b9693e95
  HalfMoveClock 508361b070112198971d56246f842621
  Turn b0d8b799572cdc0afc9568575422153c
  startingFEN ccedffb8dba4e45590bc484d06316264
import  -/  Index d8cad232a279cafde9ae933a407e67d2
  exports: f2069996af848e99f6e14ee9d6b1f04e
  Index 5c8ceb59f924ec508c7fc4cbb0c05d15
458dfcc1aefda7aa0429ea905d2402da
  $fShowBoard :: GHC.Show.Show Board.Board
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Board
                  Board.$fShowBoard_$cshowsPrec
                  Board.$fShowBoard_$cshow
                  Board.$fShowBoard_$cshowList -}
458dfcc1aefda7aa0429ea905d2402da
  $fShowBoard1 :: Board.Board -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Board.Board s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Board.$fShowBoard_$cshow x) s) -}
458dfcc1aefda7aa0429ea905d2402da
  $fShowBoard_$cshow :: Board.Board -> GHC.Base.String
  {- Arity: 1,
     Strictness: <L,1*U(A,A,A,U,U,A,U,U,A,U,U,A,U,U,A,U,U,A,U,U,A,1*U,U,U,U,U,U,U,U,A,A)>,
     Unfolding: (\ x :: Board.Board ->
                 Text.PrettyPrint.ANSI.Leijen.displayS
                   (Text.PrettyPrint.ANSI.Leijen.renderFits
                      Text.PrettyPrint.ANSI.Leijen.fits1
                      FEN.$fShowFEN3
                      FEN.$fShowFEN2
                      (case x of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ep dt26 dt27 dt28 dt29 ->
                       FEN.$wfenToDoc
                         dt3
                         dt4
                         dt6
                         dt7
                         dt9
                         dt10
                         dt12
                         dt13
                         dt15
                         dt16
                         dt18
                         dt19
                         dt21
                         dt22
                         dt23
                         dt24
                         dt25
                         ep
                         dt26
                         dt27 }))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
458dfcc1aefda7aa0429ea905d2402da
  $fShowBoard_$cshowList :: [Board.Board] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Board.Board] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Board.Board Board.$fShowBoard1 ls s) -}
458dfcc1aefda7aa0429ea905d2402da
  $fShowBoard_$cshowsPrec ::
    GHC.Types.Int -> Board.Board -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,A><L,1*U(A,A,A,U,U,A,U,U,A,U,U,A,U,U,A,U,U,A,U,U,A,1*U,U,U,U,U,U,U,U,A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Board.Board s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Board.$fShowBoard_$cshow x))
                   s) -}
458dfcc1aefda7aa0429ea905d2402da
  data Board
    = Board {bitBoard :: {-# UNPACK #-}BitBoard.BitBoard,
             turn :: ! {-# UNPACK #-}(FEN.NTCo:Turn[0])FEN.Turn,
             castling :: {-# UNPACK #-}FEN.Castling,
             enPassant :: !GHC.Base.Maybe Index.Index,
             halfMoveClock :: {-# UNPACK #-}FEN.HalfMoveClock,
             fullMoveClock :: {-# UNPACK #-}FEN.FullMoveClock,
             wKing :: {-# UNPACK #-}Index.Index,
             bKing :: {-# UNPACK #-}Index.Index}
42aff50a487c88b9416137254fcaf8bc
  bKing :: Board.Board -> Index.Index
  RecSel Board.Board
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*H,1*H,1*H,1*H,1*H,A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds1 dt26 dt27 dt28 dt29 ->
                 GHC.Types.I# dt29 }) -}
d64c58929591c287a082ed53bd8b23be
  bitBoard :: Board.Board -> BitBoard.BitBoard
  RecSel Board.Board
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,A,1*H,1*H,1*H,1*H,1*H,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds1 dt26 dt27 dt28 dt29 ->
                 BitBoard.BitBoard
                   dt
                   dt1
                   dt2
                   dt3
                   dt4
                   dt5
                   dt6
                   dt7
                   dt8
                   dt9
                   dt10
                   dt11
                   dt12
                   dt13
                   dt14
                   dt15
                   dt16
                   dt17
                   dt18
                   dt19
                   dt20 }) -}
31e62ccd0fc38ef464fa5564a70214c4
  castling :: Board.Board -> FEN.Castling
  RecSel Board.Board
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,U,U,U,1*H,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds1 dt26 dt27 dt28 dt29 ->
                 FEN.Castling dt22 dt23 dt24 dt25 }) -}
a54bb033c718ba01aa251977c00ffb5c
  enPassant :: Board.Board -> GHC.Base.Maybe Index.Index
  RecSel Board.Board
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*H,1*H,1*H,1*H,U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds1 dt26 dt27 dt28 dt29 ->
                 ds1 }) -}
e00769c714b69d19744f908e4bad77e9
  fromFEN :: FEN.FEN -> Board.Board
  {- Arity: 1,
     Strictness: <S(S(LLLLLLLLLLLLLLLLLLSSL)LS(SSSS)SLL),1*U(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,1*U,1*U,U),U,U(U,U,U,U),U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: FEN.FEN ->
                 case w of ww { FEN.FEN ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { BitBoard.BitBoard ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ->
                 case ww3 of ww29 { FEN.Castling ww30 ww31 ww32 ww33 ->
                 case ww27 of wild {
                   DEFAULT
                   -> case ww26 of wild1 {
                        DEFAULT
                        -> Board.Board
                             ww8
                             ww9
                             ww10
                             ww11
                             ww12
                             ww13
                             ww14
                             ww15
                             ww16
                             ww17
                             ww18
                             ww19
                             ww20
                             ww21
                             ww22
                             ww23
                             ww24
                             ww25
                             wild1
                             wild
                             ww28
                             ww2
                             ww30
                             ww31
                             ww32
                             ww33
                             ww4
                             ww5
                             ww6
                             (GHC.Prim.word2Int# (GHC.Prim.ctz64# wild))
                             (GHC.Prim.word2Int# (GHC.Prim.ctz64# wild1))
                        __word 0 -> case Board.fromFEN1 ret_ty Board.Board of {} }
                   __word 0
                   -> case Board.fromFEN1 ret_ty Board.Board of {} } } } }) -}
7045a58d26d8cdfe1cba8efa54ff2ed3
  fromFEN1 :: GHC.Types.Int
  {- Strictness: b -}
2765d17c8f9030747e53019e9e2e33c7
  fullMoveClock :: Board.Board -> FEN.FullMoveClock
  RecSel Board.Board
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*H,1*H,1*H,1*H,1*H,A,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds1 dt26 dt27 dt28 dt29 ->
                 GHC.Types.I# dt27 }) -}
605f607d7cbac1d0d54cc6aac42be8ce
  halfMoveClock :: Board.Board -> FEN.HalfMoveClock
  RecSel Board.Board
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*H,1*H,1*H,1*H,1*H,U,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds1 dt26 dt27 dt28 dt29 ->
                 GHC.Types.I# dt26 }) -}
02a3f29d8c843aab699b6392ac723c6d
  startingBoard :: Board.Board
  {- Unfolding: (case FEN.startingFEN of wild { FEN.FEN bb dt crs ep dt1 dt2 ->
                 case bb of dt3 { BitBoard.BitBoard dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 ->
                 case crs of dt25 { FEN.Castling dt26 dt27 dt28 dt29 ->
                 case dt23 of wild1 {
                   DEFAULT
                   -> case dt22 of wild2 {
                        DEFAULT
                        -> Board.Board
                             dt4
                             dt5
                             dt6
                             dt7
                             dt8
                             dt9
                             dt10
                             dt11
                             dt12
                             dt13
                             dt14
                             dt15
                             dt16
                             dt17
                             dt18
                             dt19
                             dt20
                             dt21
                             wild2
                             wild1
                             dt24
                             dt
                             dt26
                             dt27
                             dt28
                             dt29
                             ep
                             dt1
                             dt2
                             (GHC.Prim.word2Int# (GHC.Prim.ctz64# wild1))
                             (GHC.Prim.word2Int# (GHC.Prim.ctz64# wild2))
                        __word 0 -> case Board.fromFEN1 ret_ty Board.Board of {} }
                   __word 0
                   -> case Board.fromFEN1 ret_ty Board.Board of {} } } } }) -}
820321503c42dad60f9b20fe6fb58aa2
  toFEN :: Board.Board -> FEN.FEN
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ep dt26 dt27 dt28 dt29 ->
                 FEN.FEN
                   (BitBoard.BitBoard
                      dt
                      dt1
                      dt2
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      dt8
                      dt9
                      dt10
                      dt11
                      dt12
                      dt13
                      dt14
                      dt15
                      dt16
                      dt17
                      dt18
                      dt19
                      dt20)
                   dt21
                   (FEN.Castling dt22 dt23 dt24 dt25)
                   ep
                   dt26
                   dt27 }) -}
3d4be56abcf954640e5824f42189c1dd
  turn :: Board.Board -> FEN.Turn
  RecSel Board.Board
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,1*H,1*H,1*H,1*H,1*H,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds1 dt26 dt27 dt28 dt29 ->
                 (GHC.Word.W8# dt21) `cast` (Sym (FEN.NTCo:Turn[0])) }) -}
179cce10a5072c56759fe91c8ef57473
  wKing :: Board.Board -> Index.Index
  RecSel Board.Board
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSSSSSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*H,1*H,1*H,1*H,1*H,A,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Board.Board ->
                 case ds of wild { Board.Board dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds1 dt26 dt27 dt28 dt29 ->
                 GHC.Types.I# dt28 }) -}
instance GHC.Show.Show [Board.Board] = Board.$fShowBoard
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

