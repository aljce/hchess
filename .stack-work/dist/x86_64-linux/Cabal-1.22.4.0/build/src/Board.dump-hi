
==================== FINAL INTERFACE ====================
2015-12-20 02:03:04.85792 UTC

interface hches_4qGzBwnaltaD3l0cDd7KTT:Board 7102
  interface hash: 5e399de59064542d3e32eb12127287bd
  ABI hash: 6de8fe60da389eb76560499df71828ee
  export-list hash: 78a0f72d3084d11820e280ab5c7a05f0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b2869d8fcf4c769a0bf931957519fbbd
  sig of: Nothing
  used TH splices: False
  where
exports:
  Board.emptyBoard
  Board.Bishops{Board.B Board.unB}
  Board.BlackPieces{Board.BC Board.unBC}
  Board.Board{Board.Board}
  Board.Kings{Board.K Board.unK}
  Board.Knights{Board.N Board.unN}
  Board.Pawns{Board.P Board.unP}
  Board.Queens{Board.Q Board.unQ}
  Board.Rooks{Board.R Board.unR}
  Board.WhitePieces{Board.WC Board.unWC}
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0 containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
import  -/  base-4.8.1.0:Data.Bits 5341167fdd5958c2b3f0dac8924f1efd
import  -/  base-4.8.1.0:Data.Word 448c480b98a0c18988a37db5ab829b22
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Enum d0db4d619cd8916cc7a23444816222af
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:GHC.Word ef6286c279d61931eb675109b4b93579
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base 41288a612f7bbd399bc0bb07f2f75738
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Strict 75157829e2fd1bf3aaf8a4fd3bd7d8f4
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type bf9b4d13b1dbe96a83786d2e47d2e8ca
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops :: Data.Bits.Bits Board.Bishops
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Bishops
                  Board.$fEqBishops
                  Board.$fBitsBishops_$c.&.
                  Board.$fBitsBishops_$c.|.
                  Board.$fBitsBishops_$cxor
                  Board.$fBitsBishops_$ccomplement
                  Board.$fBitsBishops_$cshift
                  Board.$fBitsBishops_$crotate
                  Board.$fBitsBishops_$czeroBits
                  Board.$fBitsBishops_$cbit
                  Board.$fBitsBishops_$csetBit
                  Board.$fBitsBishops_$cclearBit
                  Board.$fBitsBishops_$ccomplementBit
                  Board.$fBitsBishops_$ctestBit
                  Board.$fBitsBishops_$cbitSizeMaybe
                  Board.$fBitsBishops_$cfiniteBitSize
                  Board.$fBitsBishops_$cisSigned
                  Board.$fBitsBishops_$cshiftL
                  Board.$fBitsBishops_$cunsafeShiftL
                  Board.$fBitsBishops_$cshiftR
                  Board.$fBitsBishops_$cunsafeShiftR
                  Board.$fBitsBishops_$crotateL
                  Board.$fBitsBishops_$crotateR
                  Board.$fBitsBishops_$cpopCount -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$c.&. ::
    Board.Bishops -> Board.Bishops -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$c.|. ::
    Board.Bishops -> Board.Bishops -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cbit :: GHC.Types.Int -> Board.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cbitSizeMaybe ::
    Board.Bishops -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cclearBit ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$ccomplement :: Board.Bishops -> Board.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$ccomplementBit ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cfiniteBitSize :: Board.Bishops -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cisSigned :: Board.Bishops -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R <GHC.Types.Bool>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cpopCount :: Board.Bishops -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$crotate ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$crotateL ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$crotateR ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$csetBit ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cshift ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cshiftL ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cshiftR ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$ctestBit ::
    Board.Bishops -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cunsafeShiftL ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cunsafeShiftR ::
    Board.Bishops -> GHC.Types.Int -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$cxor ::
    Board.Bishops -> Board.Bishops -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fBitsBishops_$czeroBits :: Board.Bishops
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (Board.NTCo:Bishops[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces :: Data.Bits.Bits Board.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.BlackPieces
                  Board.$fEqBlackPieces
                  Board.$fBitsBlackPieces_$c.&.
                  Board.$fBitsBlackPieces_$c.|.
                  Board.$fBitsBlackPieces_$cxor
                  Board.$fBitsBlackPieces_$ccomplement
                  Board.$fBitsBlackPieces_$cshift
                  Board.$fBitsBlackPieces_$crotate
                  Board.$fBitsBlackPieces_$czeroBits
                  Board.$fBitsBlackPieces_$cbit
                  Board.$fBitsBlackPieces_$csetBit
                  Board.$fBitsBlackPieces_$cclearBit
                  Board.$fBitsBlackPieces_$ccomplementBit
                  Board.$fBitsBlackPieces_$ctestBit
                  Board.$fBitsBlackPieces_$cbitSizeMaybe
                  Board.$fBitsBlackPieces_$cfiniteBitSize
                  Board.$fBitsBlackPieces_$cisSigned
                  Board.$fBitsBlackPieces_$cshiftL
                  Board.$fBitsBlackPieces_$cunsafeShiftL
                  Board.$fBitsBlackPieces_$cshiftR
                  Board.$fBitsBlackPieces_$cunsafeShiftR
                  Board.$fBitsBlackPieces_$crotateL
                  Board.$fBitsBlackPieces_$crotateR
                  Board.$fBitsBlackPieces_$cpopCount -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$c.&. ::
    Board.BlackPieces -> Board.BlackPieces -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$c.|. ::
    Board.BlackPieces -> Board.BlackPieces -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cbit :: GHC.Types.Int -> Board.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cbitSizeMaybe ::
    Board.BlackPieces -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cclearBit ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$ccomplement ::
    Board.BlackPieces -> Board.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$ccomplementBit ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cfiniteBitSize ::
    Board.BlackPieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cisSigned :: Board.BlackPieces -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0]) ->_R <GHC.Types.Bool>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cpopCount :: Board.BlackPieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$crotate ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$crotateL ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$crotateR ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$csetBit ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cshift ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cshiftL ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cshiftR ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$ctestBit ::
    Board.BlackPieces -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cunsafeShiftL ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cunsafeShiftR ::
    Board.BlackPieces -> GHC.Types.Int -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$cxor ::
    Board.BlackPieces -> Board.BlackPieces -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fBitsBlackPieces_$czeroBits :: Board.BlackPieces
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (Board.NTCo:BlackPieces[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings :: Data.Bits.Bits Board.Kings
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Kings
                  Board.$fEqKings
                  Board.$fBitsKings_$c.&.
                  Board.$fBitsKings_$c.|.
                  Board.$fBitsKings_$cxor
                  Board.$fBitsKings_$ccomplement
                  Board.$fBitsKings_$cshift
                  Board.$fBitsKings_$crotate
                  Board.$fBitsKings_$czeroBits
                  Board.$fBitsKings_$cbit
                  Board.$fBitsKings_$csetBit
                  Board.$fBitsKings_$cclearBit
                  Board.$fBitsKings_$ccomplementBit
                  Board.$fBitsKings_$ctestBit
                  Board.$fBitsKings_$cbitSizeMaybe
                  Board.$fBitsKings_$cfiniteBitSize
                  Board.$fBitsKings_$cisSigned
                  Board.$fBitsKings_$cshiftL
                  Board.$fBitsKings_$cunsafeShiftL
                  Board.$fBitsKings_$cshiftR
                  Board.$fBitsKings_$cunsafeShiftR
                  Board.$fBitsKings_$crotateL
                  Board.$fBitsKings_$crotateR
                  Board.$fBitsKings_$cpopCount -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$c.&. :: Board.Kings -> Board.Kings -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$c.|. :: Board.Kings -> Board.Kings -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cbit :: GHC.Types.Int -> Board.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cbitSizeMaybe ::
    Board.Kings -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cclearBit ::
    Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$ccomplement :: Board.Kings -> Board.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$ccomplementBit ::
    Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cfiniteBitSize :: Board.Kings -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cisSigned :: Board.Kings -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R <GHC.Types.Bool>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cpopCount :: Board.Kings -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$crotate :: Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$crotateL ::
    Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$crotateR ::
    Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$csetBit :: Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cshift :: Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cshiftL :: Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cshiftR :: Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$ctestBit ::
    Board.Kings -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cunsafeShiftL ::
    Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cunsafeShiftR ::
    Board.Kings -> GHC.Types.Int -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$cxor :: Board.Kings -> Board.Kings -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fBitsKings_$czeroBits :: Board.Kings
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (Board.NTCo:Kings[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights :: Data.Bits.Bits Board.Knights
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Knights
                  Board.$fEqKnights
                  Board.$fBitsKnights_$c.&.
                  Board.$fBitsKnights_$c.|.
                  Board.$fBitsKnights_$cxor
                  Board.$fBitsKnights_$ccomplement
                  Board.$fBitsKnights_$cshift
                  Board.$fBitsKnights_$crotate
                  Board.$fBitsKnights_$czeroBits
                  Board.$fBitsKnights_$cbit
                  Board.$fBitsKnights_$csetBit
                  Board.$fBitsKnights_$cclearBit
                  Board.$fBitsKnights_$ccomplementBit
                  Board.$fBitsKnights_$ctestBit
                  Board.$fBitsKnights_$cbitSizeMaybe
                  Board.$fBitsKnights_$cfiniteBitSize
                  Board.$fBitsKnights_$cisSigned
                  Board.$fBitsKnights_$cshiftL
                  Board.$fBitsKnights_$cunsafeShiftL
                  Board.$fBitsKnights_$cshiftR
                  Board.$fBitsKnights_$cunsafeShiftR
                  Board.$fBitsKnights_$crotateL
                  Board.$fBitsKnights_$crotateR
                  Board.$fBitsKnights_$cpopCount -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$c.&. ::
    Board.Knights -> Board.Knights -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$c.|. ::
    Board.Knights -> Board.Knights -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cbit :: GHC.Types.Int -> Board.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cbitSizeMaybe ::
    Board.Knights -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cclearBit ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$ccomplement :: Board.Knights -> Board.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$ccomplementBit ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cfiniteBitSize :: Board.Knights -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cisSigned :: Board.Knights -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R <GHC.Types.Bool>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cpopCount :: Board.Knights -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$crotate ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$crotateL ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$crotateR ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$csetBit ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cshift ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cshiftL ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cshiftR ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$ctestBit ::
    Board.Knights -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cunsafeShiftL ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cunsafeShiftR ::
    Board.Knights -> GHC.Types.Int -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$cxor ::
    Board.Knights -> Board.Knights -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fBitsKnights_$czeroBits :: Board.Knights
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (Board.NTCo:Knights[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns :: Data.Bits.Bits Board.Pawns
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Pawns
                  Board.$fEqPawns
                  Board.$fBitsPawns_$c.&.
                  Board.$fBitsPawns_$c.|.
                  Board.$fBitsPawns_$cxor
                  Board.$fBitsPawns_$ccomplement
                  Board.$fBitsPawns_$cshift
                  Board.$fBitsPawns_$crotate
                  Board.$fBitsPawns_$czeroBits
                  Board.$fBitsPawns_$cbit
                  Board.$fBitsPawns_$csetBit
                  Board.$fBitsPawns_$cclearBit
                  Board.$fBitsPawns_$ccomplementBit
                  Board.$fBitsPawns_$ctestBit
                  Board.$fBitsPawns_$cbitSizeMaybe
                  Board.$fBitsPawns_$cfiniteBitSize
                  Board.$fBitsPawns_$cisSigned
                  Board.$fBitsPawns_$cshiftL
                  Board.$fBitsPawns_$cunsafeShiftL
                  Board.$fBitsPawns_$cshiftR
                  Board.$fBitsPawns_$cunsafeShiftR
                  Board.$fBitsPawns_$crotateL
                  Board.$fBitsPawns_$crotateR
                  Board.$fBitsPawns_$cpopCount -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$c.&. :: Board.Pawns -> Board.Pawns -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$c.|. :: Board.Pawns -> Board.Pawns -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cbit :: GHC.Types.Int -> Board.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cbitSizeMaybe ::
    Board.Pawns -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cclearBit ::
    Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$ccomplement :: Board.Pawns -> Board.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$ccomplementBit ::
    Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cfiniteBitSize :: Board.Pawns -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cisSigned :: Board.Pawns -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R <GHC.Types.Bool>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cpopCount :: Board.Pawns -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$crotate :: Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$crotateL ::
    Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$crotateR ::
    Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$csetBit :: Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cshift :: Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cshiftL :: Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cshiftR :: Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$ctestBit ::
    Board.Pawns -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cunsafeShiftL ::
    Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cunsafeShiftR ::
    Board.Pawns -> GHC.Types.Int -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$cxor :: Board.Pawns -> Board.Pawns -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fBitsPawns_$czeroBits :: Board.Pawns
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (Board.NTCo:Pawns[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens :: Data.Bits.Bits Board.Queens
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Queens
                  Board.$fEqQueens
                  Board.$fBitsQueens_$c.&.
                  Board.$fBitsQueens_$c.|.
                  Board.$fBitsQueens_$cxor
                  Board.$fBitsQueens_$ccomplement
                  Board.$fBitsQueens_$cshift
                  Board.$fBitsQueens_$crotate
                  Board.$fBitsQueens_$czeroBits
                  Board.$fBitsQueens_$cbit
                  Board.$fBitsQueens_$csetBit
                  Board.$fBitsQueens_$cclearBit
                  Board.$fBitsQueens_$ccomplementBit
                  Board.$fBitsQueens_$ctestBit
                  Board.$fBitsQueens_$cbitSizeMaybe
                  Board.$fBitsQueens_$cfiniteBitSize
                  Board.$fBitsQueens_$cisSigned
                  Board.$fBitsQueens_$cshiftL
                  Board.$fBitsQueens_$cunsafeShiftL
                  Board.$fBitsQueens_$cshiftR
                  Board.$fBitsQueens_$cunsafeShiftR
                  Board.$fBitsQueens_$crotateL
                  Board.$fBitsQueens_$crotateR
                  Board.$fBitsQueens_$cpopCount -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$c.&. :: Board.Queens -> Board.Queens -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$c.|. :: Board.Queens -> Board.Queens -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cbit :: GHC.Types.Int -> Board.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cbitSizeMaybe ::
    Board.Queens -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cclearBit ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$ccomplement :: Board.Queens -> Board.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$ccomplementBit ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cfiniteBitSize :: Board.Queens -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cisSigned :: Board.Queens -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R <GHC.Types.Bool>_R) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cpopCount :: Board.Queens -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$crotate ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$crotateL ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$crotateR ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$csetBit ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cshift ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cshiftL ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cshiftR ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$ctestBit ::
    Board.Queens -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cunsafeShiftL ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cunsafeShiftR ::
    Board.Queens -> GHC.Types.Int -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$cxor :: Board.Queens -> Board.Queens -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fBitsQueens_$czeroBits :: Board.Queens
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (Board.NTCo:Queens[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks :: Data.Bits.Bits Board.Rooks
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Rooks
                  Board.$fEqRooks
                  Board.$fBitsRooks_$c.&.
                  Board.$fBitsRooks_$c.|.
                  Board.$fBitsRooks_$cxor
                  Board.$fBitsRooks_$ccomplement
                  Board.$fBitsRooks_$cshift
                  Board.$fBitsRooks_$crotate
                  Board.$fBitsRooks_$czeroBits
                  Board.$fBitsRooks_$cbit
                  Board.$fBitsRooks_$csetBit
                  Board.$fBitsRooks_$cclearBit
                  Board.$fBitsRooks_$ccomplementBit
                  Board.$fBitsRooks_$ctestBit
                  Board.$fBitsRooks_$cbitSizeMaybe
                  Board.$fBitsRooks_$cfiniteBitSize
                  Board.$fBitsRooks_$cisSigned
                  Board.$fBitsRooks_$cshiftL
                  Board.$fBitsRooks_$cunsafeShiftL
                  Board.$fBitsRooks_$cshiftR
                  Board.$fBitsRooks_$cunsafeShiftR
                  Board.$fBitsRooks_$crotateL
                  Board.$fBitsRooks_$crotateR
                  Board.$fBitsRooks_$cpopCount -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$c.&. :: Board.Rooks -> Board.Rooks -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$c.|. :: Board.Rooks -> Board.Rooks -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cbit :: GHC.Types.Int -> Board.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cbitSizeMaybe ::
    Board.Rooks -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cclearBit ::
    Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$ccomplement :: Board.Rooks -> Board.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$ccomplementBit ::
    Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cfiniteBitSize :: Board.Rooks -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cisSigned :: Board.Rooks -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R <GHC.Types.Bool>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cpopCount :: Board.Rooks -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$crotate :: Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$crotateL ::
    Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$crotateR ::
    Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$csetBit :: Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cshift :: Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cshiftL :: Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cshiftR :: Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$ctestBit ::
    Board.Rooks -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cunsafeShiftL ::
    Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cunsafeShiftR ::
    Board.Rooks -> GHC.Types.Int -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$cxor :: Board.Rooks -> Board.Rooks -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fBitsRooks_$czeroBits :: Board.Rooks
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (Board.NTCo:Rooks[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces :: Data.Bits.Bits Board.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.WhitePieces
                  Board.$fEqWhitePieces
                  Board.$fBitsWhitePieces_$c.&.
                  Board.$fBitsWhitePieces_$c.|.
                  Board.$fBitsWhitePieces_$cxor
                  Board.$fBitsWhitePieces_$ccomplement
                  Board.$fBitsWhitePieces_$cshift
                  Board.$fBitsWhitePieces_$crotate
                  Board.$fBitsWhitePieces_$czeroBits
                  Board.$fBitsWhitePieces_$cbit
                  Board.$fBitsWhitePieces_$csetBit
                  Board.$fBitsWhitePieces_$cclearBit
                  Board.$fBitsWhitePieces_$ccomplementBit
                  Board.$fBitsWhitePieces_$ctestBit
                  Board.$fBitsWhitePieces_$cbitSizeMaybe
                  Board.$fBitsWhitePieces_$cfiniteBitSize
                  Board.$fBitsWhitePieces_$cisSigned
                  Board.$fBitsWhitePieces_$cshiftL
                  Board.$fBitsWhitePieces_$cunsafeShiftL
                  Board.$fBitsWhitePieces_$cshiftR
                  Board.$fBitsWhitePieces_$cunsafeShiftR
                  Board.$fBitsWhitePieces_$crotateL
                  Board.$fBitsWhitePieces_$crotateR
                  Board.$fBitsWhitePieces_$cpopCount -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$c.&. ::
    Board.WhitePieces -> Board.WhitePieces -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.&.3
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$c.|. ::
    Board.WhitePieces -> Board.WhitePieces -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$c.|.3
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cbit :: GHC.Types.Int -> Board.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbit
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cbitSizeMaybe ::
    Board.WhitePieces -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cbitSizeMaybe
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Base.Maybe GHC.Types.Int>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cclearBit ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cclearBit
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$ccomplement ::
    Board.WhitePieces -> Board.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$ccomplement3
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$ccomplementBit ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ccomplementBit
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cfiniteBitSize ::
    Board.WhitePieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cfiniteBitSize
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cisSigned :: Board.WhitePieces -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cisSigned
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0]) ->_R <GHC.Types.Bool>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cpopCount :: Board.WhitePieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cpopCount
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$crotate ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$crotate3
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$crotateL ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateL
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$crotateR ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$crotateR
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$csetBit ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$csetBit
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cshift ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshift
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cshiftL ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cshiftL3
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cshiftR ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cshiftR
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$ctestBit ::
    Board.WhitePieces -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$ctestBit
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int -> GHC.Types.Bool>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cunsafeShiftL ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftL
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cunsafeShiftR ::
    Board.WhitePieces -> GHC.Types.Int -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$cunsafeShiftR
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$cxor ::
    Board.WhitePieces -> Board.WhitePieces -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cxor3
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fBitsWhitePieces_$czeroBits :: Board.WhitePieces
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord6 `cast` (Sym (Board.NTCo:WhitePieces[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops :: GHC.Enum.Enum Board.Bishops
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Bishops
                  Board.$fEnumBishops_$csucc
                  Board.$fEnumBishops_$cpred
                  Board.$fEnumBishops_$ctoEnum
                  Board.$fEnumBishops_$cfromEnum
                  Board.$fEnumBishops_$cenumFrom
                  Board.$fEnumBishops_$cenumFromThen
                  Board.$fEnumBishops_$cenumFromTo
                  Board.$fEnumBishops_$cenumFromThenTo -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops_$cenumFrom :: Board.Bishops -> [Board.Bishops]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R ([Sym (Board.NTCo:Bishops[0])])_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops_$cenumFromThen ::
    Board.Bishops -> Board.Bishops -> [Board.Bishops]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R ([Sym (Board.NTCo:Bishops[0])])_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops_$cenumFromThenTo ::
    Board.Bishops -> Board.Bishops -> Board.Bishops -> [Board.Bishops]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R ([Sym (Board.NTCo:Bishops[0])])_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops_$cenumFromTo ::
    Board.Bishops -> Board.Bishops -> [Board.Bishops]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R ([Sym (Board.NTCo:Bishops[0])])_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops_$cfromEnum :: Board.Bishops -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops_$cpred :: Board.Bishops -> Board.Bishops
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops_$csucc :: Board.Bishops -> Board.Bishops
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fEnumBishops_$ctoEnum :: GHC.Types.Int -> Board.Bishops
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Bishops[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces :: GHC.Enum.Enum Board.BlackPieces
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.BlackPieces
                  Board.$fEnumBlackPieces_$csucc
                  Board.$fEnumBlackPieces_$cpred
                  Board.$fEnumBlackPieces_$ctoEnum
                  Board.$fEnumBlackPieces_$cfromEnum
                  Board.$fEnumBlackPieces_$cenumFrom
                  Board.$fEnumBlackPieces_$cenumFromThen
                  Board.$fEnumBlackPieces_$cenumFromTo
                  Board.$fEnumBlackPieces_$cenumFromThenTo -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces_$cenumFrom ::
    Board.BlackPieces -> [Board.BlackPieces]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R ([Sym (Board.NTCo:BlackPieces[0])])_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces_$cenumFromThen ::
    Board.BlackPieces -> Board.BlackPieces -> [Board.BlackPieces]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R ([Sym (Board.NTCo:BlackPieces[0])])_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces_$cenumFromThenTo ::
    Board.BlackPieces
    -> Board.BlackPieces -> Board.BlackPieces -> [Board.BlackPieces]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R ([Sym (Board.NTCo:BlackPieces[0])])_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces_$cenumFromTo ::
    Board.BlackPieces -> Board.BlackPieces -> [Board.BlackPieces]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R ([Sym (Board.NTCo:BlackPieces[0])])_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces_$cfromEnum :: Board.BlackPieces -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces_$cpred :: Board.BlackPieces -> Board.BlackPieces
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces_$csucc :: Board.BlackPieces -> Board.BlackPieces
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEnumBlackPieces_$ctoEnum :: GHC.Types.Int -> Board.BlackPieces
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:BlackPieces[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings :: GHC.Enum.Enum Board.Kings
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Kings
                  Board.$fEnumKings_$csucc
                  Board.$fEnumKings_$cpred
                  Board.$fEnumKings_$ctoEnum
                  Board.$fEnumKings_$cfromEnum
                  Board.$fEnumKings_$cenumFrom
                  Board.$fEnumKings_$cenumFromThen
                  Board.$fEnumKings_$cenumFromTo
                  Board.$fEnumKings_$cenumFromThenTo -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings_$cenumFrom :: Board.Kings -> [Board.Kings]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R ([Sym (Board.NTCo:Kings[0])])_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings_$cenumFromThen ::
    Board.Kings -> Board.Kings -> [Board.Kings]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R ([Sym (Board.NTCo:Kings[0])])_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings_$cenumFromThenTo ::
    Board.Kings -> Board.Kings -> Board.Kings -> [Board.Kings]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R ([Sym (Board.NTCo:Kings[0])])_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings_$cenumFromTo ::
    Board.Kings -> Board.Kings -> [Board.Kings]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R ([Sym (Board.NTCo:Kings[0])])_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings_$cfromEnum :: Board.Kings -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings_$cpred :: Board.Kings -> Board.Kings
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings_$csucc :: Board.Kings -> Board.Kings
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEnumKings_$ctoEnum :: GHC.Types.Int -> Board.Kings
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Kings[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights :: GHC.Enum.Enum Board.Knights
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Knights
                  Board.$fEnumKnights_$csucc
                  Board.$fEnumKnights_$cpred
                  Board.$fEnumKnights_$ctoEnum
                  Board.$fEnumKnights_$cfromEnum
                  Board.$fEnumKnights_$cenumFrom
                  Board.$fEnumKnights_$cenumFromThen
                  Board.$fEnumKnights_$cenumFromTo
                  Board.$fEnumKnights_$cenumFromThenTo -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights_$cenumFrom :: Board.Knights -> [Board.Knights]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R ([Sym (Board.NTCo:Knights[0])])_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights_$cenumFromThen ::
    Board.Knights -> Board.Knights -> [Board.Knights]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R ([Sym (Board.NTCo:Knights[0])])_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights_$cenumFromThenTo ::
    Board.Knights -> Board.Knights -> Board.Knights -> [Board.Knights]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R ([Sym (Board.NTCo:Knights[0])])_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights_$cenumFromTo ::
    Board.Knights -> Board.Knights -> [Board.Knights]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R ([Sym (Board.NTCo:Knights[0])])_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights_$cfromEnum :: Board.Knights -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights_$cpred :: Board.Knights -> Board.Knights
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights_$csucc :: Board.Knights -> Board.Knights
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEnumKnights_$ctoEnum :: GHC.Types.Int -> Board.Knights
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Knights[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns :: GHC.Enum.Enum Board.Pawns
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Pawns
                  Board.$fEnumPawns_$csucc
                  Board.$fEnumPawns_$cpred
                  Board.$fEnumPawns_$ctoEnum
                  Board.$fEnumPawns_$cfromEnum
                  Board.$fEnumPawns_$cenumFrom
                  Board.$fEnumPawns_$cenumFromThen
                  Board.$fEnumPawns_$cenumFromTo
                  Board.$fEnumPawns_$cenumFromThenTo -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns_$cenumFrom :: Board.Pawns -> [Board.Pawns]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R ([Sym (Board.NTCo:Pawns[0])])_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns_$cenumFromThen ::
    Board.Pawns -> Board.Pawns -> [Board.Pawns]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R ([Sym (Board.NTCo:Pawns[0])])_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns_$cenumFromThenTo ::
    Board.Pawns -> Board.Pawns -> Board.Pawns -> [Board.Pawns]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R ([Sym (Board.NTCo:Pawns[0])])_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns_$cenumFromTo ::
    Board.Pawns -> Board.Pawns -> [Board.Pawns]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R ([Sym (Board.NTCo:Pawns[0])])_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns_$cfromEnum :: Board.Pawns -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns_$cpred :: Board.Pawns -> Board.Pawns
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns_$csucc :: Board.Pawns -> Board.Pawns
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEnumPawns_$ctoEnum :: GHC.Types.Int -> Board.Pawns
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Pawns[0])) -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens :: GHC.Enum.Enum Board.Queens
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Queens
                  Board.$fEnumQueens_$csucc
                  Board.$fEnumQueens_$cpred
                  Board.$fEnumQueens_$ctoEnum
                  Board.$fEnumQueens_$cfromEnum
                  Board.$fEnumQueens_$cenumFrom
                  Board.$fEnumQueens_$cenumFromThen
                  Board.$fEnumQueens_$cenumFromTo
                  Board.$fEnumQueens_$cenumFromThenTo -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens_$cenumFrom :: Board.Queens -> [Board.Queens]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R ([Sym (Board.NTCo:Queens[0])])_R) -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens_$cenumFromThen ::
    Board.Queens -> Board.Queens -> [Board.Queens]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R ([Sym (Board.NTCo:Queens[0])])_R) -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens_$cenumFromThenTo ::
    Board.Queens -> Board.Queens -> Board.Queens -> [Board.Queens]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R ([Sym (Board.NTCo:Queens[0])])_R) -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens_$cenumFromTo ::
    Board.Queens -> Board.Queens -> [Board.Queens]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R ([Sym (Board.NTCo:Queens[0])])_R) -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens_$cfromEnum :: Board.Queens -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens_$cpred :: Board.Queens -> Board.Queens
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens_$csucc :: Board.Queens -> Board.Queens
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fEnumQueens_$ctoEnum :: GHC.Types.Int -> Board.Queens
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Queens[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks :: GHC.Enum.Enum Board.Rooks
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Rooks
                  Board.$fEnumRooks_$csucc
                  Board.$fEnumRooks_$cpred
                  Board.$fEnumRooks_$ctoEnum
                  Board.$fEnumRooks_$cfromEnum
                  Board.$fEnumRooks_$cenumFrom
                  Board.$fEnumRooks_$cenumFromThen
                  Board.$fEnumRooks_$cenumFromTo
                  Board.$fEnumRooks_$cenumFromThenTo -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks_$cenumFrom :: Board.Rooks -> [Board.Rooks]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R ([Sym (Board.NTCo:Rooks[0])])_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks_$cenumFromThen ::
    Board.Rooks -> Board.Rooks -> [Board.Rooks]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R ([Sym (Board.NTCo:Rooks[0])])_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks_$cenumFromThenTo ::
    Board.Rooks -> Board.Rooks -> Board.Rooks -> [Board.Rooks]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R ([Sym (Board.NTCo:Rooks[0])])_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks_$cenumFromTo ::
    Board.Rooks -> Board.Rooks -> [Board.Rooks]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R ([Sym (Board.NTCo:Rooks[0])])_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks_$cfromEnum :: Board.Rooks -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks_$cpred :: Board.Rooks -> Board.Rooks
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks_$csucc :: Board.Rooks -> Board.Rooks
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEnumRooks_$ctoEnum :: GHC.Types.Int -> Board.Rooks
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:Rooks[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces :: GHC.Enum.Enum Board.WhitePieces
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.WhitePieces
                  Board.$fEnumWhitePieces_$csucc
                  Board.$fEnumWhitePieces_$cpred
                  Board.$fEnumWhitePieces_$ctoEnum
                  Board.$fEnumWhitePieces_$cfromEnum
                  Board.$fEnumWhitePieces_$cenumFrom
                  Board.$fEnumWhitePieces_$cenumFromThen
                  Board.$fEnumWhitePieces_$cenumFromTo
                  Board.$fEnumWhitePieces_$cenumFromThenTo -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces_$cenumFrom ::
    Board.WhitePieces -> [Board.WhitePieces]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFrom
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R ([Sym (Board.NTCo:WhitePieces[0])])_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces_$cenumFromThen ::
    Board.WhitePieces -> Board.WhitePieces -> [Board.WhitePieces]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThen
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R ([Sym (Board.NTCo:WhitePieces[0])])_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces_$cenumFromThenTo ::
    Board.WhitePieces
    -> Board.WhitePieces -> Board.WhitePieces -> [Board.WhitePieces]
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromThenTo
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R ([Sym (Board.NTCo:WhitePieces[0])])_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces_$cenumFromTo ::
    Board.WhitePieces -> Board.WhitePieces -> [Board.WhitePieces]
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cenumFromTo
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R ([Sym (Board.NTCo:WhitePieces[0])])_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces_$cfromEnum :: Board.WhitePieces -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cfromEnum
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces_$cpred :: Board.WhitePieces -> Board.WhitePieces
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$cpred
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces_$csucc :: Board.WhitePieces -> Board.WhitePieces
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$csucc
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEnumWhitePieces_$ctoEnum :: GHC.Types.Int -> Board.WhitePieces
  {- Arity: 1, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEnumWord64_$ctoEnum
                  `cast`
                (<GHC.Types.Int>_R ->_R Sym (Board.NTCo:WhitePieces[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fEqBishops :: GHC.Classes.Eq Board.Bishops
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Bishops Board.$fEqBishops_$c== Board.$fEqBishops_$c/= -}
b951e975bb172cc7f926be66a201ffbd
  $fEqBishops_$c/= ::
    Board.Bishops -> Board.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fEqBishops_$c== ::
    Board.Bishops -> Board.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEqBlackPieces :: GHC.Classes.Eq Board.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.BlackPieces
                  Board.$fEqBlackPieces_$c==
                  Board.$fEqBlackPieces_$c/= -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEqBlackPieces_$c/= ::
    Board.BlackPieces -> Board.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fEqBlackPieces_$c== ::
    Board.BlackPieces -> Board.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEqKings :: GHC.Classes.Eq Board.Kings
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Kings Board.$fEqKings_$c== Board.$fEqKings_$c/= -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEqKings_$c/= :: Board.Kings -> Board.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fEqKings_$c== :: Board.Kings -> Board.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEqKnights :: GHC.Classes.Eq Board.Knights
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Knights Board.$fEqKnights_$c== Board.$fEqKnights_$c/= -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEqKnights_$c/= ::
    Board.Knights -> Board.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fEqKnights_$c== ::
    Board.Knights -> Board.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEqPawns :: GHC.Classes.Eq Board.Pawns
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Pawns Board.$fEqPawns_$c== Board.$fEqPawns_$c/= -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEqPawns_$c/= :: Board.Pawns -> Board.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fEqPawns_$c== :: Board.Pawns -> Board.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
47287947be175a5968fed42a4c406bce
  $fEqQueens :: GHC.Classes.Eq Board.Queens
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Queens Board.$fEqQueens_$c== Board.$fEqQueens_$c/= -}
47287947be175a5968fed42a4c406bce
  $fEqQueens_$c/= :: Board.Queens -> Board.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
47287947be175a5968fed42a4c406bce
  $fEqQueens_$c== :: Board.Queens -> Board.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEqRooks :: GHC.Classes.Eq Board.Rooks
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Rooks Board.$fEqRooks_$c== Board.$fEqRooks_$c/= -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEqRooks_$c/= :: Board.Rooks -> Board.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fEqRooks_$c== :: Board.Rooks -> Board.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEqWhitePieces :: GHC.Classes.Eq Board.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.WhitePieces
                  Board.$fEqWhitePieces_$c==
                  Board.$fEqWhitePieces_$c/= -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEqWhitePieces_$c/= ::
    Board.WhitePieces -> Board.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fBitsWord64_$c/=
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fEqWhitePieces_$c== ::
    Board.WhitePieces -> Board.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fEqWord64_$c==
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fFiniteBitsBishops :: Data.Bits.FiniteBits Board.Bishops
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Bishops
                  Board.$fBitsBishops
                  Board.$fBitsBishops_$cfiniteBitSize
                  Board.$fFiniteBitsBishops_$ccountLeadingZeros
                  Board.$fFiniteBitsBishops_$ccountTrailingZeros -}
b951e975bb172cc7f926be66a201ffbd
  $fFiniteBitsBishops_$ccountLeadingZeros ::
    Board.Bishops -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fFiniteBitsBishops_$ccountTrailingZeros ::
    Board.Bishops -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R <GHC.Types.Int>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fFiniteBitsBlackPieces :: Data.Bits.FiniteBits Board.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.BlackPieces
                  Board.$fBitsBlackPieces
                  Board.$fBitsBlackPieces_$cfiniteBitSize
                  Board.$fFiniteBitsBlackPieces_$ccountLeadingZeros
                  Board.$fFiniteBitsBlackPieces_$ccountTrailingZeros -}
079a3a93ad9ddc635d944b3be97ea31c
  $fFiniteBitsBlackPieces_$ccountLeadingZeros ::
    Board.BlackPieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fFiniteBitsBlackPieces_$ccountTrailingZeros ::
    Board.BlackPieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0]) ->_R <GHC.Types.Int>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fFiniteBitsKings :: Data.Bits.FiniteBits Board.Kings
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Kings
                  Board.$fBitsKings
                  Board.$fBitsKings_$cfiniteBitSize
                  Board.$fFiniteBitsKings_$ccountLeadingZeros
                  Board.$fFiniteBitsKings_$ccountTrailingZeros -}
872dfb14e23ffeb3e373c87f724de6e5
  $fFiniteBitsKings_$ccountLeadingZeros ::
    Board.Kings -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fFiniteBitsKings_$ccountTrailingZeros ::
    Board.Kings -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R <GHC.Types.Int>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fFiniteBitsKnights :: Data.Bits.FiniteBits Board.Knights
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Knights
                  Board.$fBitsKnights
                  Board.$fBitsKnights_$cfiniteBitSize
                  Board.$fFiniteBitsKnights_$ccountLeadingZeros
                  Board.$fFiniteBitsKnights_$ccountTrailingZeros -}
69b4174e33800eea2a3c4bc0842b1e91
  $fFiniteBitsKnights_$ccountLeadingZeros ::
    Board.Knights -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fFiniteBitsKnights_$ccountTrailingZeros ::
    Board.Knights -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R <GHC.Types.Int>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fFiniteBitsPawns :: Data.Bits.FiniteBits Board.Pawns
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Pawns
                  Board.$fBitsPawns
                  Board.$fBitsPawns_$cfiniteBitSize
                  Board.$fFiniteBitsPawns_$ccountLeadingZeros
                  Board.$fFiniteBitsPawns_$ccountTrailingZeros -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fFiniteBitsPawns_$ccountLeadingZeros ::
    Board.Pawns -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fFiniteBitsPawns_$ccountTrailingZeros ::
    Board.Pawns -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R <GHC.Types.Int>_R) -}
47287947be175a5968fed42a4c406bce
  $fFiniteBitsQueens :: Data.Bits.FiniteBits Board.Queens
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Queens
                  Board.$fBitsQueens
                  Board.$fBitsQueens_$cfiniteBitSize
                  Board.$fFiniteBitsQueens_$ccountLeadingZeros
                  Board.$fFiniteBitsQueens_$ccountTrailingZeros -}
47287947be175a5968fed42a4c406bce
  $fFiniteBitsQueens_$ccountLeadingZeros ::
    Board.Queens -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
47287947be175a5968fed42a4c406bce
  $fFiniteBitsQueens_$ccountTrailingZeros ::
    Board.Queens -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R <GHC.Types.Int>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fFiniteBitsRooks :: Data.Bits.FiniteBits Board.Rooks
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Rooks
                  Board.$fBitsRooks
                  Board.$fBitsRooks_$cfiniteBitSize
                  Board.$fFiniteBitsRooks_$ccountLeadingZeros
                  Board.$fFiniteBitsRooks_$ccountTrailingZeros -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fFiniteBitsRooks_$ccountLeadingZeros ::
    Board.Rooks -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fFiniteBitsRooks_$ccountTrailingZeros ::
    Board.Rooks -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R <GHC.Types.Int>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fFiniteBitsWhitePieces :: Data.Bits.FiniteBits Board.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.WhitePieces
                  Board.$fBitsWhitePieces
                  Board.$fBitsWhitePieces_$cfiniteBitSize
                  Board.$fFiniteBitsWhitePieces_$ccountLeadingZeros
                  Board.$fFiniteBitsWhitePieces_$ccountTrailingZeros -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fFiniteBitsWhitePieces_$ccountLeadingZeros ::
    Board.WhitePieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fFiniteBitsWhitePieces_$ccountTrailingZeros ::
    Board.WhitePieces -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0]) ->_R <GHC.Types.Int>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fNumBishops :: GHC.Num.Num Board.Bishops
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Bishops
                  Board.$fNumBishops_$c+
                  Board.$fNumBishops_$c-
                  Board.$fNumBishops_$c*
                  Board.$fNumBishops_$cnegate
                  Board.$fNumBishops_$cabs
                  Board.$fNumBishops_$csignum
                  Board.$fNumBishops_$cfromInteger -}
b951e975bb172cc7f926be66a201ffbd
  $fNumBishops_$c* :: Board.Bishops -> Board.Bishops -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fNumBishops_$c+ :: Board.Bishops -> Board.Bishops -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fNumBishops_$c- :: Board.Bishops -> Board.Bishops -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fNumBishops_$cabs :: Board.Bishops -> Board.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fNumBishops_$cfromInteger ::
    GHC.Integer.Type.Integer -> Board.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fNumBishops_$cnegate :: Board.Bishops -> Board.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fNumBishops_$csignum :: Board.Bishops -> Board.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (Board.NTCo:Bishops[0]) ->_R Sym (Board.NTCo:Bishops[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fNumBlackPieces :: GHC.Num.Num Board.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.BlackPieces
                  Board.$fNumBlackPieces_$c+
                  Board.$fNumBlackPieces_$c-
                  Board.$fNumBlackPieces_$c*
                  Board.$fNumBlackPieces_$cnegate
                  Board.$fNumBlackPieces_$cabs
                  Board.$fNumBlackPieces_$csignum
                  Board.$fNumBlackPieces_$cfromInteger -}
079a3a93ad9ddc635d944b3be97ea31c
  $fNumBlackPieces_$c* ::
    Board.BlackPieces -> Board.BlackPieces -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fNumBlackPieces_$c+ ::
    Board.BlackPieces -> Board.BlackPieces -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fNumBlackPieces_$c- ::
    Board.BlackPieces -> Board.BlackPieces -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fNumBlackPieces_$cabs :: Board.BlackPieces -> Board.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fNumBlackPieces_$cfromInteger ::
    GHC.Integer.Type.Integer -> Board.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fNumBlackPieces_$cnegate :: Board.BlackPieces -> Board.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fNumBlackPieces_$csignum :: Board.BlackPieces -> Board.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fNumKings :: GHC.Num.Num Board.Kings
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Kings
                  Board.$fNumKings_$c+
                  Board.$fNumKings_$c-
                  Board.$fNumKings_$c*
                  Board.$fNumKings_$cnegate
                  Board.$fNumKings_$cabs
                  Board.$fNumKings_$csignum
                  Board.$fNumKings_$cfromInteger -}
872dfb14e23ffeb3e373c87f724de6e5
  $fNumKings_$c* :: Board.Kings -> Board.Kings -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fNumKings_$c+ :: Board.Kings -> Board.Kings -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fNumKings_$c- :: Board.Kings -> Board.Kings -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fNumKings_$cabs :: Board.Kings -> Board.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fNumKings_$cfromInteger :: GHC.Integer.Type.Integer -> Board.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fNumKings_$cnegate :: Board.Kings -> Board.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fNumKings_$csignum :: Board.Kings -> Board.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (Board.NTCo:Kings[0]) ->_R Sym (Board.NTCo:Kings[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fNumKnights :: GHC.Num.Num Board.Knights
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Knights
                  Board.$fNumKnights_$c+
                  Board.$fNumKnights_$c-
                  Board.$fNumKnights_$c*
                  Board.$fNumKnights_$cnegate
                  Board.$fNumKnights_$cabs
                  Board.$fNumKnights_$csignum
                  Board.$fNumKnights_$cfromInteger -}
69b4174e33800eea2a3c4bc0842b1e91
  $fNumKnights_$c* :: Board.Knights -> Board.Knights -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fNumKnights_$c+ :: Board.Knights -> Board.Knights -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fNumKnights_$c- :: Board.Knights -> Board.Knights -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fNumKnights_$cabs :: Board.Knights -> Board.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fNumKnights_$cfromInteger ::
    GHC.Integer.Type.Integer -> Board.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fNumKnights_$cnegate :: Board.Knights -> Board.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fNumKnights_$csignum :: Board.Knights -> Board.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (Board.NTCo:Knights[0]) ->_R Sym (Board.NTCo:Knights[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fNumPawns :: GHC.Num.Num Board.Pawns
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Pawns
                  Board.$fNumPawns_$c+
                  Board.$fNumPawns_$c-
                  Board.$fNumPawns_$c*
                  Board.$fNumPawns_$cnegate
                  Board.$fNumPawns_$cabs
                  Board.$fNumPawns_$csignum
                  Board.$fNumPawns_$cfromInteger -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fNumPawns_$c* :: Board.Pawns -> Board.Pawns -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fNumPawns_$c+ :: Board.Pawns -> Board.Pawns -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fNumPawns_$c- :: Board.Pawns -> Board.Pawns -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fNumPawns_$cabs :: Board.Pawns -> Board.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fNumPawns_$cfromInteger :: GHC.Integer.Type.Integer -> Board.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fNumPawns_$cnegate :: Board.Pawns -> Board.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fNumPawns_$csignum :: Board.Pawns -> Board.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (Board.NTCo:Pawns[0]) ->_R Sym (Board.NTCo:Pawns[0])) -}
47287947be175a5968fed42a4c406bce
  $fNumQueens :: GHC.Num.Num Board.Queens
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Queens
                  Board.$fNumQueens_$c+
                  Board.$fNumQueens_$c-
                  Board.$fNumQueens_$c*
                  Board.$fNumQueens_$cnegate
                  Board.$fNumQueens_$cabs
                  Board.$fNumQueens_$csignum
                  Board.$fNumQueens_$cfromInteger -}
47287947be175a5968fed42a4c406bce
  $fNumQueens_$c* :: Board.Queens -> Board.Queens -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fNumQueens_$c+ :: Board.Queens -> Board.Queens -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fNumQueens_$c- :: Board.Queens -> Board.Queens -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fNumQueens_$cabs :: Board.Queens -> Board.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fNumQueens_$cfromInteger ::
    GHC.Integer.Type.Integer -> Board.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fNumQueens_$cnegate :: Board.Queens -> Board.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fNumQueens_$csignum :: Board.Queens -> Board.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (Board.NTCo:Queens[0]) ->_R Sym (Board.NTCo:Queens[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fNumRooks :: GHC.Num.Num Board.Rooks
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Rooks
                  Board.$fNumRooks_$c+
                  Board.$fNumRooks_$c-
                  Board.$fNumRooks_$c*
                  Board.$fNumRooks_$cnegate
                  Board.$fNumRooks_$cabs
                  Board.$fNumRooks_$csignum
                  Board.$fNumRooks_$cfromInteger -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fNumRooks_$c* :: Board.Rooks -> Board.Rooks -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fNumRooks_$c+ :: Board.Rooks -> Board.Rooks -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fNumRooks_$c- :: Board.Rooks -> Board.Rooks -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fNumRooks_$cabs :: Board.Rooks -> Board.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fNumRooks_$cfromInteger :: GHC.Integer.Type.Integer -> Board.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fNumRooks_$cnegate :: Board.Rooks -> Board.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fNumRooks_$csignum :: Board.Rooks -> Board.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (Board.NTCo:Rooks[0]) ->_R Sym (Board.NTCo:Rooks[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fNumWhitePieces :: GHC.Num.Num Board.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.WhitePieces
                  Board.$fNumWhitePieces_$c+
                  Board.$fNumWhitePieces_$c-
                  Board.$fNumWhitePieces_$c*
                  Board.$fNumWhitePieces_$cnegate
                  Board.$fNumWhitePieces_$cabs
                  Board.$fNumWhitePieces_$csignum
                  Board.$fNumWhitePieces_$cfromInteger -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fNumWhitePieces_$c* ::
    Board.WhitePieces -> Board.WhitePieces -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c*
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fNumWhitePieces_$c+ ::
    Board.WhitePieces -> Board.WhitePieces -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c+
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fNumWhitePieces_$c- ::
    Board.WhitePieces -> Board.WhitePieces -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$c-
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fNumWhitePieces_$cabs :: Board.WhitePieces -> Board.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cabs
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fNumWhitePieces_$cfromInteger ::
    GHC.Integer.Type.Integer -> Board.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$cfromInteger3
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fNumWhitePieces_$cnegate :: Board.WhitePieces -> Board.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$cnegate
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fNumWhitePieces_$csignum :: Board.WhitePieces -> Board.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fNumWord64_$csignum
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fOrdBishops :: GHC.Classes.Ord Board.Bishops
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Bishops
                  Board.$fEqBishops
                  Board.$fOrdBishops_$ccompare
                  Board.$fOrdBishops_$c<
                  Board.$fOrdBishops_$c<=
                  Board.$fOrdBishops_$c>
                  Board.$fOrdBishops_$c>=
                  Board.$fOrdBishops_$cmax
                  Board.$fOrdBishops_$cmin -}
b951e975bb172cc7f926be66a201ffbd
  $fOrdBishops_$c< ::
    Board.Bishops -> Board.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fOrdBishops_$c<= ::
    Board.Bishops -> Board.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fOrdBishops_$c> ::
    Board.Bishops -> Board.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fOrdBishops_$c>= ::
    Board.Bishops -> Board.Bishops -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Bool>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fOrdBishops_$ccompare ::
    Board.Bishops -> Board.Bishops -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R <GHC.Types.Ordering>_R) -}
b951e975bb172cc7f926be66a201ffbd
  $fOrdBishops_$cmax ::
    Board.Bishops -> Board.Bishops -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fOrdBishops_$cmin ::
    Board.Bishops -> Board.Bishops -> Board.Bishops
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])
                 ->_R Sym (Board.NTCo:Bishops[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fOrdBlackPieces :: GHC.Classes.Ord Board.BlackPieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.BlackPieces
                  Board.$fEqBlackPieces
                  Board.$fOrdBlackPieces_$ccompare
                  Board.$fOrdBlackPieces_$c<
                  Board.$fOrdBlackPieces_$c<=
                  Board.$fOrdBlackPieces_$c>
                  Board.$fOrdBlackPieces_$c>=
                  Board.$fOrdBlackPieces_$cmax
                  Board.$fOrdBlackPieces_$cmin -}
079a3a93ad9ddc635d944b3be97ea31c
  $fOrdBlackPieces_$c< ::
    Board.BlackPieces -> Board.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fOrdBlackPieces_$c<= ::
    Board.BlackPieces -> Board.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fOrdBlackPieces_$c> ::
    Board.BlackPieces -> Board.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fOrdBlackPieces_$c>= ::
    Board.BlackPieces -> Board.BlackPieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fOrdBlackPieces_$ccompare ::
    Board.BlackPieces -> Board.BlackPieces -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R <GHC.Types.Ordering>_R) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fOrdBlackPieces_$cmax ::
    Board.BlackPieces -> Board.BlackPieces -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fOrdBlackPieces_$cmin ::
    Board.BlackPieces -> Board.BlackPieces -> Board.BlackPieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])
                 ->_R Sym (Board.NTCo:BlackPieces[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fOrdKings :: GHC.Classes.Ord Board.Kings
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Kings
                  Board.$fEqKings
                  Board.$fOrdKings_$ccompare
                  Board.$fOrdKings_$c<
                  Board.$fOrdKings_$c<=
                  Board.$fOrdKings_$c>
                  Board.$fOrdKings_$c>=
                  Board.$fOrdKings_$cmax
                  Board.$fOrdKings_$cmin -}
872dfb14e23ffeb3e373c87f724de6e5
  $fOrdKings_$c< :: Board.Kings -> Board.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fOrdKings_$c<= :: Board.Kings -> Board.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fOrdKings_$c> :: Board.Kings -> Board.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fOrdKings_$c>= :: Board.Kings -> Board.Kings -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Bool>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fOrdKings_$ccompare ::
    Board.Kings -> Board.Kings -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R <GHC.Types.Ordering>_R) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fOrdKings_$cmax :: Board.Kings -> Board.Kings -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fOrdKings_$cmin :: Board.Kings -> Board.Kings -> Board.Kings
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])
                 ->_R Sym (Board.NTCo:Kings[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fOrdKnights :: GHC.Classes.Ord Board.Knights
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Knights
                  Board.$fEqKnights
                  Board.$fOrdKnights_$ccompare
                  Board.$fOrdKnights_$c<
                  Board.$fOrdKnights_$c<=
                  Board.$fOrdKnights_$c>
                  Board.$fOrdKnights_$c>=
                  Board.$fOrdKnights_$cmax
                  Board.$fOrdKnights_$cmin -}
69b4174e33800eea2a3c4bc0842b1e91
  $fOrdKnights_$c< ::
    Board.Knights -> Board.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fOrdKnights_$c<= ::
    Board.Knights -> Board.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fOrdKnights_$c> ::
    Board.Knights -> Board.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fOrdKnights_$c>= ::
    Board.Knights -> Board.Knights -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Bool>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fOrdKnights_$ccompare ::
    Board.Knights -> Board.Knights -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R <GHC.Types.Ordering>_R) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fOrdKnights_$cmax ::
    Board.Knights -> Board.Knights -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fOrdKnights_$cmin ::
    Board.Knights -> Board.Knights -> Board.Knights
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])
                 ->_R Sym (Board.NTCo:Knights[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fOrdPawns :: GHC.Classes.Ord Board.Pawns
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Pawns
                  Board.$fEqPawns
                  Board.$fOrdPawns_$ccompare
                  Board.$fOrdPawns_$c<
                  Board.$fOrdPawns_$c<=
                  Board.$fOrdPawns_$c>
                  Board.$fOrdPawns_$c>=
                  Board.$fOrdPawns_$cmax
                  Board.$fOrdPawns_$cmin -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fOrdPawns_$c< :: Board.Pawns -> Board.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fOrdPawns_$c<= :: Board.Pawns -> Board.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fOrdPawns_$c> :: Board.Pawns -> Board.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fOrdPawns_$c>= :: Board.Pawns -> Board.Pawns -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Bool>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fOrdPawns_$ccompare ::
    Board.Pawns -> Board.Pawns -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R <GHC.Types.Ordering>_R) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fOrdPawns_$cmax :: Board.Pawns -> Board.Pawns -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fOrdPawns_$cmin :: Board.Pawns -> Board.Pawns -> Board.Pawns
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])
                 ->_R Sym (Board.NTCo:Pawns[0])) -}
47287947be175a5968fed42a4c406bce
  $fOrdQueens :: GHC.Classes.Ord Board.Queens
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Queens
                  Board.$fEqQueens
                  Board.$fOrdQueens_$ccompare
                  Board.$fOrdQueens_$c<
                  Board.$fOrdQueens_$c<=
                  Board.$fOrdQueens_$c>
                  Board.$fOrdQueens_$c>=
                  Board.$fOrdQueens_$cmax
                  Board.$fOrdQueens_$cmin -}
47287947be175a5968fed42a4c406bce
  $fOrdQueens_$c< :: Board.Queens -> Board.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
47287947be175a5968fed42a4c406bce
  $fOrdQueens_$c<= :: Board.Queens -> Board.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
47287947be175a5968fed42a4c406bce
  $fOrdQueens_$c> :: Board.Queens -> Board.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
47287947be175a5968fed42a4c406bce
  $fOrdQueens_$c>= :: Board.Queens -> Board.Queens -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Bool>_R) -}
47287947be175a5968fed42a4c406bce
  $fOrdQueens_$ccompare ::
    Board.Queens -> Board.Queens -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R <GHC.Types.Ordering>_R) -}
47287947be175a5968fed42a4c406bce
  $fOrdQueens_$cmax :: Board.Queens -> Board.Queens -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])) -}
47287947be175a5968fed42a4c406bce
  $fOrdQueens_$cmin :: Board.Queens -> Board.Queens -> Board.Queens
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])
                 ->_R Sym (Board.NTCo:Queens[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fOrdRooks :: GHC.Classes.Ord Board.Rooks
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Rooks
                  Board.$fEqRooks
                  Board.$fOrdRooks_$ccompare
                  Board.$fOrdRooks_$c<
                  Board.$fOrdRooks_$c<=
                  Board.$fOrdRooks_$c>
                  Board.$fOrdRooks_$c>=
                  Board.$fOrdRooks_$cmax
                  Board.$fOrdRooks_$cmin -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fOrdRooks_$c< :: Board.Rooks -> Board.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fOrdRooks_$c<= :: Board.Rooks -> Board.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fOrdRooks_$c> :: Board.Rooks -> Board.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fOrdRooks_$c>= :: Board.Rooks -> Board.Rooks -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Bool>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fOrdRooks_$ccompare ::
    Board.Rooks -> Board.Rooks -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R <GHC.Types.Ordering>_R) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fOrdRooks_$cmax :: Board.Rooks -> Board.Rooks -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fOrdRooks_$cmin :: Board.Rooks -> Board.Rooks -> Board.Rooks
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])
                 ->_R Sym (Board.NTCo:Rooks[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fOrdWhitePieces :: GHC.Classes.Ord Board.WhitePieces
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.WhitePieces
                  Board.$fEqWhitePieces
                  Board.$fOrdWhitePieces_$ccompare
                  Board.$fOrdWhitePieces_$c<
                  Board.$fOrdWhitePieces_$c<=
                  Board.$fOrdWhitePieces_$c>
                  Board.$fOrdWhitePieces_$c>=
                  Board.$fOrdWhitePieces_$cmax
                  Board.$fOrdWhitePieces_$cmin -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fOrdWhitePieces_$c< ::
    Board.WhitePieces -> Board.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fOrdWhitePieces_$c<= ::
    Board.WhitePieces -> Board.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c<=
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fOrdWhitePieces_$c> ::
    Board.WhitePieces -> Board.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fOrdWhitePieces_$c>= ::
    Board.WhitePieces -> Board.WhitePieces -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$c>=
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Bool>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fOrdWhitePieces_$ccompare ::
    Board.WhitePieces -> Board.WhitePieces -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$ccompare
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R <GHC.Types.Ordering>_R) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fOrdWhitePieces_$cmax ::
    Board.WhitePieces -> Board.WhitePieces -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmax
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fOrdWhitePieces_$cmin ::
    Board.WhitePieces -> Board.WhitePieces -> Board.WhitePieces
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Word.$fOrdWord64_$cmin
                  `cast`
                (Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])
                 ->_R Sym (Board.NTCo:WhitePieces[0])) -}
b951e975bb172cc7f926be66a201ffbd
  $fShowBishops :: GHC.Show.Show Board.Bishops
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Bishops
                  Board.$fShowBishops_$cshowsPrec
                  Board.$fShowBishops_$cshow
                  Board.$fShowBishops_$cshowList -}
b951e975bb172cc7f926be66a201ffbd
  $fShowBishops1 :: Board.Bishops -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Board.Bishops -> Board.$w$cshowsPrec 0 w) -}
9e27cf96dad9a31b20b8cabbcef0d88a
  $fShowBishops2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
5a4d48899881f5829388b904d05b5ae3
  $fShowBishops3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unB = "#) -}
cfbd8c067865812a2244292b71198669
  $fShowBishops4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "B {"#) -}
b951e975bb172cc7f926be66a201ffbd
  $fShowBishops_$cshow :: Board.Bishops -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Board.Bishops ->
                 Board.$fShowBishops_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b951e975bb172cc7f926be66a201ffbd
  $fShowBishops_$cshowList :: [Board.Bishops] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.Bishops
                   Board.$fShowBishops1) -}
b951e975bb172cc7f926be66a201ffbd
  $fShowBishops_$cshowsPrec ::
    GHC.Types.Int -> Board.Bishops -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.Bishops ->
                 case w of ww { GHC.Types.I# ww1 -> Board.$w$cshowsPrec ww1 w1 }) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fShowBlackPieces :: GHC.Show.Show Board.BlackPieces
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.BlackPieces
                  Board.$fShowBlackPieces_$cshowsPrec
                  Board.$fShowBlackPieces_$cshow
                  Board.$fShowBlackPieces_$cshowList -}
079a3a93ad9ddc635d944b3be97ea31c
  $fShowBlackPieces1 :: Board.BlackPieces -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Board.BlackPieces ->
                 Board.$w$cshowsPrec1 0 w) -}
f6943b685aea2b8be071001814677dfa
  $fShowBlackPieces2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unBC = "#) -}
1bd2feb88211618a96ef703d7f4f0979
  $fShowBlackPieces3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BC {"#) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fShowBlackPieces_$cshow :: Board.BlackPieces -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Board.BlackPieces ->
                 Board.$fShowBlackPieces_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fShowBlackPieces_$cshowList ::
    [Board.BlackPieces] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.BlackPieces
                   Board.$fShowBlackPieces1) -}
079a3a93ad9ddc635d944b3be97ea31c
  $fShowBlackPieces_$cshowsPrec ::
    GHC.Types.Int -> Board.BlackPieces -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.BlackPieces ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Board.$w$cshowsPrec1 ww1 w1 }) -}
52220b1fcd24266e69dd5961065a9659
  $fShowBoard :: GHC.Show.Show Board.Board
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Board
                  Board.$fShowBoard_$cshowsPrec
                  Board.showBoard
                  Board.$fShowBoard_$cshowList -}
52220b1fcd24266e69dd5961065a9659
  $fShowBoard_$cshowList :: [Board.Board] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [Board.Board] s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ Board.Board
                   (\ b :: Board.Board ->
                    GHC.Base.++ @ GHC.Types.Char (Board.showBoard b))
                   ls
                   s) -}
52220b1fcd24266e69dd5961065a9659
  $fShowBoard_$cshowsPrec ::
    GHC.Types.Int -> Board.Board -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,A><L,1*U(U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Types.Int b :: Board.Board ->
                 GHC.Base.++ @ GHC.Types.Char (Board.showBoard b)) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fShowKings :: GHC.Show.Show Board.Kings
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Kings
                  Board.$fShowKings_$cshowsPrec
                  Board.$fShowKings_$cshow
                  Board.$fShowKings_$cshowList -}
872dfb14e23ffeb3e373c87f724de6e5
  $fShowKings1 :: Board.Kings -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Board.Kings -> Board.$w$cshowsPrec2 0 w) -}
1b50af0a047678c32c9ad6d20ef23342
  $fShowKings2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unK = "#) -}
25acc8a0ea73f3f960b14c17d1c32c6b
  $fShowKings3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "K {"#) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fShowKings_$cshow :: Board.Kings -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Board.Kings ->
                 Board.$fShowKings_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fShowKings_$cshowList :: [Board.Kings] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.Kings
                   Board.$fShowKings1) -}
872dfb14e23ffeb3e373c87f724de6e5
  $fShowKings_$cshowsPrec ::
    GHC.Types.Int -> Board.Kings -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.Kings ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Board.$w$cshowsPrec2 ww1 w1 }) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fShowKnights :: GHC.Show.Show Board.Knights
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Knights
                  Board.$fShowKnights_$cshowsPrec
                  Board.$fShowKnights_$cshow
                  Board.$fShowKnights_$cshowList -}
69b4174e33800eea2a3c4bc0842b1e91
  $fShowKnights1 :: Board.Knights -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Board.Knights -> Board.$w$cshowsPrec3 0 w) -}
ac3763d8af742fe33dff8b9effb72cc5
  $fShowKnights2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unN = "#) -}
99e2d826fa9959227dd6d48230b74f2e
  $fShowKnights3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N {"#) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fShowKnights_$cshow :: Board.Knights -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Board.Knights ->
                 Board.$fShowKnights_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fShowKnights_$cshowList :: [Board.Knights] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.Knights
                   Board.$fShowKnights1) -}
69b4174e33800eea2a3c4bc0842b1e91
  $fShowKnights_$cshowsPrec ::
    GHC.Types.Int -> Board.Knights -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.Knights ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Board.$w$cshowsPrec3 ww1 w1 }) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fShowPawns :: GHC.Show.Show Board.Pawns
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Pawns
                  Board.$fShowPawns_$cshowsPrec
                  Board.$fShowPawns_$cshow
                  Board.$fShowPawns_$cshowList -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fShowPawns1 :: Board.Pawns -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Board.Pawns -> Board.$w$cshowsPrec4 0 w) -}
9097123a905d3a8fd69a29d96b19c493
  $fShowPawns2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unP = "#) -}
b31621ceb2051770e31c446b7c1e868d
  $fShowPawns3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "P {"#) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fShowPawns_$cshow :: Board.Pawns -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Board.Pawns ->
                 Board.$fShowPawns_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fShowPawns_$cshowList :: [Board.Pawns] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.Pawns
                   Board.$fShowPawns1) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $fShowPawns_$cshowsPrec ::
    GHC.Types.Int -> Board.Pawns -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.Pawns ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Board.$w$cshowsPrec4 ww1 w1 }) -}
47287947be175a5968fed42a4c406bce
  $fShowQueens :: GHC.Show.Show Board.Queens
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Queens
                  Board.$fShowQueens_$cshowsPrec
                  Board.$fShowQueens_$cshow
                  Board.$fShowQueens_$cshowList -}
47287947be175a5968fed42a4c406bce
  $fShowQueens1 :: Board.Queens -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Board.Queens -> Board.$w$cshowsPrec5 0 w) -}
4d3d5c671a4264362897f9f6f07f46af
  $fShowQueens2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unQ = "#) -}
dda886015ff0f09a765e895ad577c321
  $fShowQueens3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Q {"#) -}
47287947be175a5968fed42a4c406bce
  $fShowQueens_$cshow :: Board.Queens -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Board.Queens ->
                 Board.$fShowQueens_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
47287947be175a5968fed42a4c406bce
  $fShowQueens_$cshowList :: [Board.Queens] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.Queens
                   Board.$fShowQueens1) -}
47287947be175a5968fed42a4c406bce
  $fShowQueens_$cshowsPrec ::
    GHC.Types.Int -> Board.Queens -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.Queens ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Board.$w$cshowsPrec5 ww1 w1 }) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fShowRooks :: GHC.Show.Show Board.Rooks
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.Rooks
                  Board.$fShowRooks_$cshowsPrec
                  Board.$fShowRooks_$cshow
                  Board.$fShowRooks_$cshowList -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fShowRooks1 :: Board.Rooks -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Board.Rooks -> Board.$w$cshowsPrec6 0 w) -}
345ab18a3c5e077ef6900afb9736e6ec
  $fShowRooks2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unR = "#) -}
788632764beea65bf35e7a79945d030f
  $fShowRooks3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "R {"#) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fShowRooks_$cshow :: Board.Rooks -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Board.Rooks ->
                 Board.$fShowRooks_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fShowRooks_$cshowList :: [Board.Rooks] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.Rooks
                   Board.$fShowRooks1) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $fShowRooks_$cshowsPrec ::
    GHC.Types.Int -> Board.Rooks -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.Rooks ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Board.$w$cshowsPrec6 ww1 w1 }) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fShowWhitePieces :: GHC.Show.Show Board.WhitePieces
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Board.WhitePieces
                  Board.$fShowWhitePieces_$cshowsPrec
                  Board.$fShowWhitePieces_$cshow
                  Board.$fShowWhitePieces_$cshowList -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fShowWhitePieces1 :: Board.WhitePieces -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Board.WhitePieces ->
                 Board.$w$cshowsPrec7 0 w) -}
4c849fe1b949bcad199c3ffcf1b7a0b7
  $fShowWhitePieces2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unWC = "#) -}
dddfe289168e41dd2a7581043d95c9c7
  $fShowWhitePieces3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "WC {"#) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fShowWhitePieces_$cshow :: Board.WhitePieces -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Board.WhitePieces ->
                 Board.$fShowWhitePieces_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fShowWhitePieces_$cshowList ::
    [Board.WhitePieces] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Board.WhitePieces
                   Board.$fShowWhitePieces1) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $fShowWhitePieces_$cshowsPrec ::
    GHC.Types.Int -> Board.WhitePieces -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Board.WhitePieces ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Board.$w$cshowsPrec7 ww1 w1 }) -}
dc14adcc1d93d216d47ed508b43a874c
  $s$dmshowList1 :: Board.Board -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ b :: Board.Board ->
                 GHC.Base.++ @ GHC.Types.Char (Board.showBoard b)) -}
b951e975bb172cc7f926be66a201ffbd
  $w$cshowsPrec :: GHC.Prim.Int# -> Board.Bishops -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Board.Bishops ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (Board.NTCo:Bishops[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowBishops4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Board.$fShowBishops3
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Board.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
079a3a93ad9ddc635d944b3be97ea31c
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Board.BlackPieces -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Board.BlackPieces ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (Board.NTCo:BlackPieces[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowBlackPieces3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Board.$fShowBlackPieces2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Board.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
872dfb14e23ffeb3e373c87f724de6e5
  $w$cshowsPrec2 :: GHC.Prim.Int# -> Board.Kings -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Board.Kings ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast` (Board.NTCo:Kings[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowKings3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Board.$fShowKings2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Board.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
69b4174e33800eea2a3c4bc0842b1e91
  $w$cshowsPrec3 :: GHC.Prim.Int# -> Board.Knights -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Board.Knights ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (Board.NTCo:Knights[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowKnights3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Board.$fShowKnights2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Board.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
cb0394d88134d1ce8a19b2f0bf94b8fd
  $w$cshowsPrec4 :: GHC.Prim.Int# -> Board.Pawns -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Board.Pawns ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast` (Board.NTCo:Pawns[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowPawns3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Board.$fShowPawns2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Board.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
47287947be175a5968fed42a4c406bce
  $w$cshowsPrec5 :: GHC.Prim.Int# -> Board.Queens -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Board.Queens ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (Board.NTCo:Queens[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowQueens3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Board.$fShowQueens2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Board.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
5b3934f273da0637d4a9dbaeec4dddd6
  $w$cshowsPrec6 :: GHC.Prim.Int# -> Board.Rooks -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Board.Rooks ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast` (Board.NTCo:Rooks[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowRooks3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Board.$fShowRooks2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Board.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
19bda77fc2bffa1a7cc0404c1629c8b6
  $w$cshowsPrec7 ::
    GHC.Prim.Int# -> Board.WhitePieces -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# w :: Board.WhitePieces ->
                 let {
                   w1 :: GHC.Integer.Type.Integer
                   = case w `cast`
                          (Board.NTCo:WhitePieces[0]) of wild { GHC.Word.W64# x# ->
                     let {
                       i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# i# 0) of wild1 {
                       GHC.Types.False -> GHC.Integer.Type.wordToInteger x#
                       GHC.Types.True -> GHC.Integer.Type.smallInteger i# } }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Board.$fShowWhitePieces3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Board.$fShowWhitePieces2
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  w1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Board.$fShowBishops2
                                     x) of ww2 { (#,#) ww3 ww4 ->
                           GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
2e3878855f516dc7317999c2f62ff8d5
  $wshowBoard ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Base.String
  {- Arity: 8, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
b951e975bb172cc7f926be66a201ffbd
  newtype Bishops = B {unB :: GHC.Word.Word64}
079a3a93ad9ddc635d944b3be97ea31c
  newtype BlackPieces = BC {unBC :: GHC.Word.Word64}
52220b1fcd24266e69dd5961065a9659
  data Board
    = Board ! {-# UNPACK #-}(Board.NTCo:BlackPieces[0])Board.BlackPieces
            ! {-# UNPACK #-}(Board.NTCo:WhitePieces[0])Board.WhitePieces
            ! {-# UNPACK #-}(Board.NTCo:Pawns[0])Board.Pawns
            ! {-# UNPACK #-}(Board.NTCo:Rooks[0])Board.Rooks
            ! {-# UNPACK #-}(Board.NTCo:Knights[0])Board.Knights
            ! {-# UNPACK #-}(Board.NTCo:Bishops[0])Board.Bishops
            ! {-# UNPACK #-}(Board.NTCo:Queens[0])Board.Queens
            ! {-# UNPACK #-}(Board.NTCo:Kings[0])Board.Kings
872dfb14e23ffeb3e373c87f724de6e5
  newtype Kings = K {unK :: GHC.Word.Word64}
69b4174e33800eea2a3c4bc0842b1e91
  newtype Knights = N {unN :: GHC.Word.Word64}
cb0394d88134d1ce8a19b2f0bf94b8fd
  newtype Pawns = P {unP :: GHC.Word.Word64}
47287947be175a5968fed42a4c406bce
  newtype Queens = Q {unQ :: GHC.Word.Word64}
5b3934f273da0637d4a9dbaeec4dddd6
  newtype Rooks = R {unR :: GHC.Word.Word64}
19bda77fc2bffa1a7cc0404c1629c8b6
  newtype WhitePieces = WC {unWC :: GHC.Word.Word64}
a7ac2bd960463326e4db05f64f25fcc5
  emptyBoard :: Board.Board
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Board.Board
                   __word 0
                   __word 0
                   __word 0
                   __word 0
                   __word 0
                   __word 0
                   __word 0
                   __word 0) -}
52220b1fcd24266e69dd5961065a9659
  showBoard :: Board.Board -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Board.Board ->
                 case w of ww { Board.Board ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Board.$wshowBoard ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 }) -}
64a14d87e7bb6d8fd32fb53ad3ff9f23
  unB :: Board.Bishops -> GHC.Word.Word64
  RecSel Board.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Board.unB1 `cast` (<Board.Bishops>_R ->_R Board.NTCo:Bishops[0]) -}
e4d3dff7b9f096c73a7dda151f8bb9f8
  unB1 :: Board.Bishops -> Board.Bishops
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Board.Bishops -> ds) -}
aecf5dc5ef2413df0d3b77939baf2944
  unBC :: Board.BlackPieces -> GHC.Word.Word64
  RecSel Board.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Board.unBC1
                  `cast`
                (<Board.BlackPieces>_R ->_R Board.NTCo:BlackPieces[0]) -}
f3cd89ce1f56d51e7b579faff7595173
  unBC1 :: Board.BlackPieces -> Board.BlackPieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Board.BlackPieces -> ds) -}
948a2406f24266b34592e0f03e6528ae
  unK :: Board.Kings -> GHC.Word.Word64
  RecSel Board.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Board.unK1 `cast` (<Board.Kings>_R ->_R Board.NTCo:Kings[0]) -}
cf22a7f09e104141b93906944e7d3686
  unK1 :: Board.Kings -> Board.Kings
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Board.Kings -> ds) -}
1f6520717b7e166fabecfccd182d8acf
  unN :: Board.Knights -> GHC.Word.Word64
  RecSel Board.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Board.unN1 `cast` (<Board.Knights>_R ->_R Board.NTCo:Knights[0]) -}
9c74a44cde2f9f740347e6421bcdff80
  unN1 :: Board.Knights -> Board.Knights
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Board.Knights -> ds) -}
cb9663d8dcfc1b608028570668a391f2
  unP :: Board.Pawns -> GHC.Word.Word64
  RecSel Board.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Board.unP1 `cast` (<Board.Pawns>_R ->_R Board.NTCo:Pawns[0]) -}
c2496348f4b5287e4842e883021cff84
  unP1 :: Board.Pawns -> Board.Pawns
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Board.Pawns -> ds) -}
7f017f39180a6b35cfc3b8bc12a6341d
  unQ :: Board.Queens -> GHC.Word.Word64
  RecSel Board.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Board.unQ1 `cast` (<Board.Queens>_R ->_R Board.NTCo:Queens[0]) -}
50a9c7d04e1dee20420d4fa5f5ae0daf
  unQ1 :: Board.Queens -> Board.Queens
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Board.Queens -> ds) -}
fdb31961ca6399db55cc3462afed8dd9
  unR :: Board.Rooks -> GHC.Word.Word64
  RecSel Board.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Board.unR1 `cast` (<Board.Rooks>_R ->_R Board.NTCo:Rooks[0]) -}
921fa34267c2d5a54467d413420d6152
  unR1 :: Board.Rooks -> Board.Rooks
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Board.Rooks -> ds) -}
c93c753d3be96381c7d59fd16d55986f
  unWC :: Board.WhitePieces -> GHC.Word.Word64
  RecSel Board.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Board.unWC1
                  `cast`
                (<Board.WhitePieces>_R ->_R Board.NTCo:WhitePieces[0]) -}
bd960598c568726378bbf299104ee342
  unWC1 :: Board.WhitePieces -> Board.WhitePieces
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Board.WhitePieces -> ds) -}
instance Data.Bits.Bits [Board.Bishops] = Board.$fBitsBishops
instance Data.Bits.Bits [Board.BlackPieces]
  = Board.$fBitsBlackPieces
instance Data.Bits.Bits [Board.Kings] = Board.$fBitsKings
instance Data.Bits.Bits [Board.Knights] = Board.$fBitsKnights
instance Data.Bits.Bits [Board.Pawns] = Board.$fBitsPawns
instance Data.Bits.Bits [Board.Queens] = Board.$fBitsQueens
instance Data.Bits.Bits [Board.Rooks] = Board.$fBitsRooks
instance Data.Bits.Bits [Board.WhitePieces]
  = Board.$fBitsWhitePieces
instance GHC.Enum.Enum [Board.Bishops] = Board.$fEnumBishops
instance GHC.Enum.Enum [Board.BlackPieces]
  = Board.$fEnumBlackPieces
instance GHC.Enum.Enum [Board.Kings] = Board.$fEnumKings
instance GHC.Enum.Enum [Board.Knights] = Board.$fEnumKnights
instance GHC.Enum.Enum [Board.Pawns] = Board.$fEnumPawns
instance GHC.Enum.Enum [Board.Queens] = Board.$fEnumQueens
instance GHC.Enum.Enum [Board.Rooks] = Board.$fEnumRooks
instance GHC.Enum.Enum [Board.WhitePieces]
  = Board.$fEnumWhitePieces
instance GHC.Classes.Eq [Board.Bishops] = Board.$fEqBishops
instance GHC.Classes.Eq [Board.BlackPieces] = Board.$fEqBlackPieces
instance GHC.Classes.Eq [Board.Kings] = Board.$fEqKings
instance GHC.Classes.Eq [Board.Knights] = Board.$fEqKnights
instance GHC.Classes.Eq [Board.Pawns] = Board.$fEqPawns
instance GHC.Classes.Eq [Board.Queens] = Board.$fEqQueens
instance GHC.Classes.Eq [Board.Rooks] = Board.$fEqRooks
instance GHC.Classes.Eq [Board.WhitePieces] = Board.$fEqWhitePieces
instance Data.Bits.FiniteBits [Board.Bishops]
  = Board.$fFiniteBitsBishops
instance Data.Bits.FiniteBits [Board.BlackPieces]
  = Board.$fFiniteBitsBlackPieces
instance Data.Bits.FiniteBits [Board.Kings]
  = Board.$fFiniteBitsKings
instance Data.Bits.FiniteBits [Board.Knights]
  = Board.$fFiniteBitsKnights
instance Data.Bits.FiniteBits [Board.Pawns]
  = Board.$fFiniteBitsPawns
instance Data.Bits.FiniteBits [Board.Queens]
  = Board.$fFiniteBitsQueens
instance Data.Bits.FiniteBits [Board.Rooks]
  = Board.$fFiniteBitsRooks
instance Data.Bits.FiniteBits [Board.WhitePieces]
  = Board.$fFiniteBitsWhitePieces
instance GHC.Num.Num [Board.Bishops] = Board.$fNumBishops
instance GHC.Num.Num [Board.BlackPieces] = Board.$fNumBlackPieces
instance GHC.Num.Num [Board.Kings] = Board.$fNumKings
instance GHC.Num.Num [Board.Knights] = Board.$fNumKnights
instance GHC.Num.Num [Board.Pawns] = Board.$fNumPawns
instance GHC.Num.Num [Board.Queens] = Board.$fNumQueens
instance GHC.Num.Num [Board.Rooks] = Board.$fNumRooks
instance GHC.Num.Num [Board.WhitePieces] = Board.$fNumWhitePieces
instance GHC.Classes.Ord [Board.Bishops] = Board.$fOrdBishops
instance GHC.Classes.Ord [Board.BlackPieces]
  = Board.$fOrdBlackPieces
instance GHC.Classes.Ord [Board.Kings] = Board.$fOrdKings
instance GHC.Classes.Ord [Board.Knights] = Board.$fOrdKnights
instance GHC.Classes.Ord [Board.Pawns] = Board.$fOrdPawns
instance GHC.Classes.Ord [Board.Queens] = Board.$fOrdQueens
instance GHC.Classes.Ord [Board.Rooks] = Board.$fOrdRooks
instance GHC.Classes.Ord [Board.WhitePieces]
  = Board.$fOrdWhitePieces
instance GHC.Show.Show [Board.Bishops] = Board.$fShowBishops
instance GHC.Show.Show [Board.BlackPieces]
  = Board.$fShowBlackPieces
instance GHC.Show.Show [Board.Board] = Board.$fShowBoard
instance GHC.Show.Show [Board.Kings] = Board.$fShowKings
instance GHC.Show.Show [Board.Knights] = Board.$fShowKnights
instance GHC.Show.Show [Board.Pawns] = Board.$fShowPawns
instance GHC.Show.Show [Board.Queens] = Board.$fShowQueens
instance GHC.Show.Show [Board.Rooks] = Board.$fShowRooks
instance GHC.Show.Show [Board.WhitePieces]
  = Board.$fShowWhitePieces
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

